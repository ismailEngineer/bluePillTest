
bluePillTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004898  08006dc0  08006dc0  00016dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b658  0800b658  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800b658  0800b658  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b658  0800b658  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b65c  0800b65c  0001b65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  20000098  0800b6f8  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  0800b6f8  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfe6  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9d  00000000  00000000  0002d0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018415  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f398  00000000  00000000  00048215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008ba76  00000000  00000000  000575ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e3023  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000cd0  00000000  00000000  000e3078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004230  00000000  00000000  000e3d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08006da4 	.word	0x08006da4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08006da4 	.word	0x08006da4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 ff10 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f820 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 fa1e 	bl	80013f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fb8:	f000 f890 	bl	80010dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f8e6 	bl	800118c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc0:	f000 f970 	bl	80012a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fc4:	f000 f9c2 	bl	800134c <MX_TIM4_Init>
  MX_I2C2_Init();
 8000fc8:	f000 f85a 	bl	8001080 <MX_I2C2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <main+0x44>)
 8000fd2:	f002 fa2d 	bl	8003430 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <main+0x48>)
 8000fdc:	f002 fa28 	bl	8003430 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000fe0:	20c8      	movs	r0, #200	; 0xc8
 8000fe2:	f001 ff57 	bl	8002e94 <HAL_Delay>

	  ssd1306_TestAll();
 8000fe6:	f001 fc9b 	bl	8002920 <ssd1306_TestAll>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000fea:	e7ef      	b.n	8000fcc <main+0x24>
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b090      	sub	sp, #64	; 0x40
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fa20 	bl	8005448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001032:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4618      	mov	r0, r3
 800103e:	f002 febd 	bl	8003dbc <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001048:	f000 fa42 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f003 f92a 	bl	80042c0 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001072:	f000 fa2d 	bl	80014d0 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	; 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C2_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C2_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C2_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C2_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C2_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C2_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C2_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C2_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C2_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C2_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C2_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C2_Init+0x50>)
 80010be:	f002 f9d1 	bl	8003464 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 fa02 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	40005800 	.word	0x40005800
 80010d8:	00061a80 	.word	0x00061a80

080010dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 f9ac 	bl	8005448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_TIM1_Init+0xa8>)
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <MX_TIM1_Init+0xac>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_TIM1_Init+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_TIM1_Init+0xa8>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_TIM1_Init+0xa8>)
 800110c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001110:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_TIM1_Init+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_TIM1_Init+0xa8>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_TIM1_Init+0xa8>)
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001124:	2303      	movs	r3, #3
 8001126:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001134:	230a      	movs	r3, #10
 8001136:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800113c:	2301      	movs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_TIM1_Init+0xa8>)
 8001150:	f003 fad7 	bl	8004702 <HAL_TIM_Encoder_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800115a:	f000 f9b9 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_TIM1_Init+0xa8>)
 800116c:	f004 f8aa 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001176:	f000 f9ab 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3730      	adds	r7, #48	; 0x30
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000108 	.word	0x20000108
 8001188:	40012c00 	.word	0x40012c00

0800118c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e4:	482e      	ldr	r0, [pc, #184]	; (80012a0 <MX_TIM2_Init+0x114>)
 80011e6:	f003 f9e5 	bl	80045b4 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011f0:	f000 f96e 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	4619      	mov	r1, r3
 8001200:	4827      	ldr	r0, [pc, #156]	; (80012a0 <MX_TIM2_Init+0x114>)
 8001202:	f003 fceb 	bl	8004bdc <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800120c:	f000 f960 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001210:	4823      	ldr	r0, [pc, #140]	; (80012a0 <MX_TIM2_Init+0x114>)
 8001212:	f003 fa1e 	bl	8004652 <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800121c:	f000 f958 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4619      	mov	r1, r3
 800122e:	481c      	ldr	r0, [pc, #112]	; (80012a0 <MX_TIM2_Init+0x114>)
 8001230:	f004 f848 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800123a:	f000 f949 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123e:	2360      	movs	r3, #96	; 0x60
 8001240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <MX_TIM2_Init+0x114>)
 8001256:	f003 fbff 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001260:	f000 f936 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM2_Init+0x114>)
 800126c:	f003 fbf4 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001276:	f000 f92b 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2208      	movs	r2, #8
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM2_Init+0x114>)
 8001282:	f003 fbe9 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800128c:	f000 f920 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM2_Init+0x114>)
 8001292:	f001 fcc5 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3738      	adds	r7, #56	; 0x38
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000150 	.word	0x20000150

080012a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f8c8 	bl	8005448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_TIM3_Init+0xa4>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e6:	2303      	movs	r3, #3
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012f6:	230a      	movs	r3, #10
 80012f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fe:	2301      	movs	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM3_Init+0xa0>)
 8001312:	f003 f9f6 	bl	8004702 <HAL_TIM_Encoder_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800131c:	f000 f8d8 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM3_Init+0xa0>)
 800132e:	f003 ffc9 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001338:	f000 f8ca 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000198 	.word	0x20000198
 8001348:	40000400 	.word	0x40000400

0800134c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f004 f874 	bl	8005448 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_TIM4_Init+0xa0>)
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <MX_TIM4_Init+0xa4>)
 800136c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_TIM4_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_TIM4_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM4_Init+0xa0>)
 800137c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001380:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_TIM4_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_TIM4_Init+0xa0>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138e:	2303      	movs	r3, #3
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800139e:	230a      	movs	r3, #10
 80013a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM4_Init+0xa0>)
 80013ba:	f003 f9a2 	bl	8004702 <HAL_TIM_Encoder_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 f884 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM4_Init+0xa0>)
 80013d6:	f003 ff75 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 f876 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200001e0 	.word	0x200001e0
 80013f0:	40000800 	.word	0x40000800

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_GPIO_Init+0xd0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <MX_GPIO_Init+0xd0>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_GPIO_Init+0xd0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_GPIO_Init+0xd0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <MX_GPIO_Init+0xd0>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_GPIO_Init+0xd0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_GPIO_Init+0xd0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <MX_GPIO_Init+0xd0>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_GPIO_Init+0xd0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_GPIO_Init+0xd0>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <MX_GPIO_Init+0xd0>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_GPIO_Init+0xd0>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlueLed_GPIO_Port, BlueLed_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146e:	4816      	ldr	r0, [pc, #88]	; (80014c8 <MX_GPIO_Init+0xd4>)
 8001470:	f001 ffc6 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_GPIO_Init+0xd8>)
 800147c:	f001 ffc0 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BlueLed_Pin */
  GPIO_InitStruct.Pin = BlueLed_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2302      	movs	r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BlueLed_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4619      	mov	r1, r3
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <MX_GPIO_Init+0xd4>)
 800149a:	f001 fe2d 	bl	80030f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_GPIO_Init+0xd8>)
 80014b8:	f001 fe1e 	bl	80030f8 <HAL_GPIO_Init>

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40010c00 	.word	0x40010c00

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>

080014da <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
	...

080014e8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	2301      	movs	r3, #1
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	2200      	movs	r2, #0
 8001504:	2178      	movs	r1, #120	; 0x78
 8001506:	4803      	ldr	r0, [pc, #12]	; (8001514 <ssd1306_WriteCommand+0x2c>)
 8001508:	f002 f8f0 	bl	80036ec <HAL_I2C_Mem_Write>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000b4 	.word	0x200000b4

08001518 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af04      	add	r7, sp, #16
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800152a:	9202      	str	r2, [sp, #8]
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2301      	movs	r3, #1
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	2178      	movs	r1, #120	; 0x78
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <ssd1306_WriteData+0x30>)
 800153a:	f002 f8d7 	bl	80036ec <HAL_I2C_Mem_Write>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200000b4 	.word	0x200000b4

0800154c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001550:	f7ff ffc3 	bl	80014da <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f001 fc9d 	bl	8002e94 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800155a:	2000      	movs	r0, #0
 800155c:	f000 ff2a 	bl	80023b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001560:	2020      	movs	r0, #32
 8001562:	f7ff ffc1 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff ffbe 	bl	80014e8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800156c:	20b0      	movs	r0, #176	; 0xb0
 800156e:	f7ff ffbb 	bl	80014e8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001572:	20c8      	movs	r0, #200	; 0xc8
 8001574:	f7ff ffb8 	bl	80014e8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ffb5 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800157e:	2010      	movs	r0, #16
 8001580:	f7ff ffb2 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001584:	2040      	movs	r0, #64	; 0x40
 8001586:	f7ff ffaf 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800158a:	20ff      	movs	r0, #255	; 0xff
 800158c:	f000 fefe 	bl	800238c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001590:	20a1      	movs	r0, #161	; 0xa1
 8001592:	f7ff ffa9 	bl	80014e8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001596:	20a6      	movs	r0, #166	; 0xa6
 8001598:	f7ff ffa6 	bl	80014e8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800159c:	20a8      	movs	r0, #168	; 0xa8
 800159e:	f7ff ffa3 	bl	80014e8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80015a2:	203f      	movs	r0, #63	; 0x3f
 80015a4:	f7ff ffa0 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015a8:	20a4      	movs	r0, #164	; 0xa4
 80015aa:	f7ff ff9d 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015ae:	20d3      	movs	r0, #211	; 0xd3
 80015b0:	f7ff ff9a 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ff97 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015ba:	20d5      	movs	r0, #213	; 0xd5
 80015bc:	f7ff ff94 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015c0:	20f0      	movs	r0, #240	; 0xf0
 80015c2:	f7ff ff91 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015c6:	20d9      	movs	r0, #217	; 0xd9
 80015c8:	f7ff ff8e 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015cc:	2022      	movs	r0, #34	; 0x22
 80015ce:	f7ff ff8b 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015d2:	20da      	movs	r0, #218	; 0xda
 80015d4:	f7ff ff88 	bl	80014e8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80015d8:	2012      	movs	r0, #18
 80015da:	f7ff ff85 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015de:	20db      	movs	r0, #219	; 0xdb
 80015e0:	f7ff ff82 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80015e4:	2020      	movs	r0, #32
 80015e6:	f7ff ff7f 	bl	80014e8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80015ea:	208d      	movs	r0, #141	; 0x8d
 80015ec:	f7ff ff7c 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80015f0:	2014      	movs	r0, #20
 80015f2:	f7ff ff79 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fedc 	bl	80023b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 f80f 	bl	8001620 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001602:	f000 f825 	bl	8001650 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <ssd1306_Init+0xd0>)
 8001608:	2200      	movs	r2, #0
 800160a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <ssd1306_Init+0xd0>)
 800160e:	2200      	movs	r2, #0
 8001610:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001612:	4b02      	ldr	r3, [pc, #8]	; (800161c <ssd1306_Init+0xd0>)
 8001614:	2201      	movs	r2, #1
 8001616:	711a      	strb	r2, [r3, #4]
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000628 	.word	0x20000628

08001620 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <ssd1306_Fill+0x14>
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <ssd1306_Fill+0x16>
 8001634:	23ff      	movs	r3, #255	; 0xff
 8001636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163a:	4619      	mov	r1, r3
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <ssd1306_Fill+0x2c>)
 800163e:	f003 ff03 	bl	8005448 <memset>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000228 	.word	0x20000228

08001650 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	e016      	b.n	800168a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	3b50      	subs	r3, #80	; 0x50
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff40 	bl	80014e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff ff3d 	bl	80014e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800166e:	2010      	movs	r0, #16
 8001670:	f7ff ff3a 	bl	80014e8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	01db      	lsls	r3, r3, #7
 8001678:	4a08      	ldr	r2, [pc, #32]	; (800169c <ssd1306_UpdateScreen+0x4c>)
 800167a:	4413      	add	r3, r2
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff4a 	bl	8001518 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	3301      	adds	r3, #1
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b07      	cmp	r3, #7
 800168e:	d9e5      	bls.n	800165c <ssd1306_UpdateScreen+0xc>
    }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000228 	.word	0x20000228

080016a0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	460b      	mov	r3, r1
 80016ac:	71bb      	strb	r3, [r7, #6]
 80016ae:	4613      	mov	r3, r2
 80016b0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db3d      	blt.n	8001736 <ssd1306_DrawPixel+0x96>
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	2b3f      	cmp	r3, #63	; 0x3f
 80016be:	d83a      	bhi.n	8001736 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80016c0:	797b      	ldrb	r3, [r7, #5]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d11a      	bne.n	80016fc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016c6:	79fa      	ldrb	r2, [r7, #7]
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	b2d8      	uxtb	r0, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	01db      	lsls	r3, r3, #7
 80016d2:	4413      	add	r3, r2
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <ssd1306_DrawPixel+0xa0>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b259      	sxtb	r1, r3
 80016ec:	79fa      	ldrb	r2, [r7, #7]
 80016ee:	4603      	mov	r3, r0
 80016f0:	01db      	lsls	r3, r3, #7
 80016f2:	4413      	add	r3, r2
 80016f4:	b2c9      	uxtb	r1, r1
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <ssd1306_DrawPixel+0xa0>)
 80016f8:	54d1      	strb	r1, [r2, r3]
 80016fa:	e01d      	b.n	8001738 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	b2d8      	uxtb	r0, r3
 8001704:	4603      	mov	r3, r0
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	4413      	add	r3, r2
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <ssd1306_DrawPixel+0xa0>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	b25a      	sxtb	r2, r3
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	b25b      	sxtb	r3, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	b25b      	sxtb	r3, r3
 8001722:	4013      	ands	r3, r2
 8001724:	b259      	sxtb	r1, r3
 8001726:	79fa      	ldrb	r2, [r7, #7]
 8001728:	4603      	mov	r3, r0
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4413      	add	r3, r2
 800172e:	b2c9      	uxtb	r1, r1
 8001730:	4a03      	ldr	r2, [pc, #12]	; (8001740 <ssd1306_DrawPixel+0xa0>)
 8001732:	54d1      	strb	r1, [r2, r3]
 8001734:	e000      	b.n	8001738 <ssd1306_DrawPixel+0x98>
        return;
 8001736:	bf00      	nop
    }
}
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000228 	.word	0x20000228

08001744 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	4604      	mov	r4, r0
 800174c:	1d38      	adds	r0, r7, #4
 800174e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001752:	461a      	mov	r2, r3
 8001754:	4623      	mov	r3, r4
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	4613      	mov	r3, r2
 800175a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b1f      	cmp	r3, #31
 8001760:	d902      	bls.n	8001768 <ssd1306_WriteChar+0x24>
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b7e      	cmp	r3, #126	; 0x7e
 8001766:	d901      	bls.n	800176c <ssd1306_WriteChar+0x28>
        return 0;
 8001768:	2300      	movs	r3, #0
 800176a:	e06d      	b.n	8001848 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <ssd1306_WriteChar+0x10c>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	793b      	ldrb	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	dc06      	bgt.n	8001788 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <ssd1306_WriteChar+0x10c>)
 800177c:	885b      	ldrh	r3, [r3, #2]
 800177e:	461a      	mov	r2, r3
 8001780:	797b      	ldrb	r3, [r7, #5]
 8001782:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001784:	2b40      	cmp	r3, #64	; 0x40
 8001786:	dd01      	ble.n	800178c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001788:	2300      	movs	r3, #0
 800178a:	e05d      	b.n	8001848 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	e04c      	b.n	800182c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	3b20      	subs	r3, #32
 8001798:	7979      	ldrb	r1, [r7, #5]
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	440b      	add	r3, r1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	e034      	b.n	800181c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d012      	beq.n	80017e8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <ssd1306_WriteChar+0x10c>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b2d8      	uxtb	r0, r3
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <ssd1306_WriteChar+0x10c>)
 80017d2:	885b      	ldrh	r3, [r3, #2]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4413      	add	r3, r2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	7bba      	ldrb	r2, [r7, #14]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <ssd1306_DrawPixel>
 80017e6:	e016      	b.n	8001816 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <ssd1306_WriteChar+0x10c>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b2d8      	uxtb	r0, r3
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <ssd1306_WriteChar+0x10c>)
 80017f8:	885b      	ldrh	r3, [r3, #2]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b2d9      	uxtb	r1, r3
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f7ff ff45 	bl	80016a0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	3301      	adds	r3, #1
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	793b      	ldrb	r3, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4293      	cmp	r3, r2
 8001824:	d3c5      	bcc.n	80017b2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	797b      	ldrb	r3, [r7, #5]
 800182e:	461a      	mov	r2, r3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4293      	cmp	r3, r2
 8001834:	d3ad      	bcc.n	8001792 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <ssd1306_WriteChar+0x10c>)
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	793b      	ldrb	r3, [r7, #4]
 800183c:	b29b      	uxth	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	b29a      	uxth	r2, r3
 8001842:	4b03      	ldr	r3, [pc, #12]	; (8001850 <ssd1306_WriteChar+0x10c>)
 8001844:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	20000628 	.word	0x20000628

08001854 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	1d38      	adds	r0, r7, #4
 800185e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001862:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001864:	e012      	b.n	800188c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	7818      	ldrb	r0, [r3, #0]
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	1d3a      	adds	r2, r7, #4
 800186e:	ca06      	ldmia	r2, {r1, r2}
 8001870:	f7ff ff68 	bl	8001744 <ssd1306_WriteChar>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d002      	beq.n	8001886 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	e008      	b.n	8001898 <ssd1306_WriteString+0x44>
        }
        str++;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e8      	bne.n	8001866 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	781b      	ldrb	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	460a      	mov	r2, r1
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	4613      	mov	r3, r2
 80018ae:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <ssd1306_SetCursor+0x2c>)
 80018b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <ssd1306_SetCursor+0x2c>)
 80018be:	805a      	strh	r2, [r3, #2]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000628 	.word	0x20000628

080018d0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	4603      	mov	r3, r0
 80018e4:	71bb      	strb	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	717b      	strb	r3, [r7, #5]
 80018ea:	4613      	mov	r3, r2
 80018ec:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80018ee:	797a      	ldrb	r2, [r7, #5]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bfb8      	it	lt
 80018f8:	425b      	neglt	r3, r3
 80018fa:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80018fc:	793a      	ldrb	r2, [r7, #4]
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	bfb8      	it	lt
 8001906:	425b      	neglt	r3, r3
 8001908:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	429a      	cmp	r2, r3
 8001910:	d201      	bcs.n	8001916 <ssd1306_Line+0x46>
 8001912:	2301      	movs	r3, #1
 8001914:	e001      	b.n	800191a <ssd1306_Line+0x4a>
 8001916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800191c:	79ba      	ldrb	r2, [r7, #6]
 800191e:	793b      	ldrb	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d201      	bcs.n	8001928 <ssd1306_Line+0x58>
 8001924:	2301      	movs	r3, #1
 8001926:	e001      	b.n	800192c <ssd1306_Line+0x5c>
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8001936:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800193a:	7939      	ldrb	r1, [r7, #4]
 800193c:	797b      	ldrb	r3, [r7, #5]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff feae 	bl	80016a0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001944:	e024      	b.n	8001990 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001946:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800194a:	79b9      	ldrb	r1, [r7, #6]
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fea6 	bl	80016a0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	425b      	negs	r3, r3
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	429a      	cmp	r2, r3
 8001962:	dd08      	ble.n	8001976 <ssd1306_Line+0xa6>
            error -= deltaY;
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4413      	add	r3, r2
 8001974:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	429a      	cmp	r2, r3
 800197c:	da08      	bge.n	8001990 <ssd1306_Line+0xc0>
            error += deltaX;
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4413      	add	r3, r2
 8001984:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	79bb      	ldrb	r3, [r7, #6]
 800198c:	4413      	add	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	797b      	ldrb	r3, [r7, #5]
 8001994:	429a      	cmp	r2, r3
 8001996:	d1d6      	bne.n	8001946 <ssd1306_Line+0x76>
 8001998:	79ba      	ldrb	r2, [r7, #6]
 800199a:	793b      	ldrb	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d1d2      	bne.n	8001946 <ssd1306_Line+0x76>
        }
    }
    return;
 80019a0:	bf00      	nop
}
 80019a2:	3724      	adds	r7, #36	; 0x24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d02a      	beq.n	8001a14 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80019be:	2301      	movs	r3, #1
 80019c0:	81fb      	strh	r3, [r7, #14]
 80019c2:	e022      	b.n	8001a0a <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80019c4:	89fb      	ldrh	r3, [r7, #14]
 80019c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80019ca:	3b01      	subs	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	7818      	ldrb	r0, [r3, #0]
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80019da:	3b01      	subs	r3, #1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	7859      	ldrb	r1, [r3, #1]
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	781c      	ldrb	r4, [r3, #0]
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	785a      	ldrb	r2, [r3, #1]
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	4622      	mov	r2, r4
 8001a00:	f7ff ff66 	bl	80018d0 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	3301      	adds	r3, #1
 8001a08:	81fb      	strh	r3, [r7, #14]
 8001a0a:	89fa      	ldrh	r2, [r7, #14]
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3d8      	bcc.n	80019c4 <ssd1306_Polyline+0x1c>
    }

    return;
 8001a12:	e000      	b.n	8001a16 <ssd1306_Polyline+0x6e>
        return;
 8001a14:	bf00      	nop
}
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	0000      	movs	r0, r0
	...

08001a20 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fcf5 	bl	8000418 <__aeabi_f2d>
 8001a2e:	a30c      	add	r3, pc, #48	; (adr r3, 8001a60 <ssd1306_DegToRad+0x40>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fd48 	bl	80004c8 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <ssd1306_DegToRad+0x48>)
 8001a46:	f7fe fe69 	bl	800071c <__aeabi_ddiv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	f7fe fffb 	bl	8000a4c <__aeabi_d2f>
 8001a56:	4603      	mov	r3, r0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	51eb851f 	.word	0x51eb851f
 8001a64:	40091eb8 	.word	0x40091eb8
 8001a68:	40668000 	.word	0x40668000

08001a6c <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001a7c:	d802      	bhi.n	8001a84 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	81fb      	strh	r3, [r7, #14]
 8001a82:	e013      	b.n	8001aac <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	490b      	ldr	r1, [pc, #44]	; (8001ab8 <ssd1306_NormalizeTo0_360+0x4c>)
 8001a8a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a8e:	0892      	lsrs	r2, r2, #2
 8001a90:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001a94:	fb01 f202 	mul.w	r2, r1, r2
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	81fb      	strh	r3, [r7, #14]
        loc_angle = ((par_deg != 0)?par_deg:360);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <ssd1306_NormalizeTo0_360+0x3a>
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	e001      	b.n	8001aaa <ssd1306_NormalizeTo0_360+0x3e>
 8001aa6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001aaa:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001aac:	89fb      	ldrh	r3, [r7, #14]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	16c16c17 	.word	0x16c16c17

08001abc <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4623      	mov	r3, r4
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71bb      	strb	r3, [r7, #6]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	717b      	strb	r3, [r7, #5]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
    float rad;

    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001ae2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ffc1 	bl	8001a6c <ssd1306_NormalizeTo0_360>
 8001aea:	4603      	mov	r3, r0
 8001aec:	617b      	str	r3, [r7, #20]

    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ffbb 	bl	8001a6c <ssd1306_NormalizeTo0_360>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <ssd1306_DrawArc+0x210>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4a73      	ldr	r2, [pc, #460]	; (8001cd0 <ssd1306_DrawArc+0x214>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	441a      	add	r2, r3
 8001b0a:	1212      	asrs	r2, r2, #8
 8001b0c:	17db      	asrs	r3, r3, #31
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001b12:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <ssd1306_DrawArc+0x210>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	08db      	lsrs	r3, r3, #3
 8001b20:	4a6c      	ldr	r2, [pc, #432]	; (8001cd4 <ssd1306_DrawArc+0x218>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff f894 	bl	8000c58 <__aeabi_ui2f>
 8001b30:	4604      	mov	r4, r0
 8001b32:	6938      	ldr	r0, [r7, #16]
 8001b34:	f7ff f890 	bl	8000c58 <__aeabi_ui2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff f997 	bl	8000e70 <__aeabi_fdiv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	60fb      	str	r3, [r7, #12]
    while(count < approx_segments)
 8001b46:	e0b7      	b.n	8001cb8 <ssd1306_DrawArc+0x1fc>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8001b48:	69f8      	ldr	r0, [r7, #28]
 8001b4a:	f7ff f885 	bl	8000c58 <__aeabi_ui2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f8d8 	bl	8000d08 <__aeabi_fmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff60 	bl	8001a20 <ssd1306_DegToRad>
 8001b60:	61b8      	str	r0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8001b62:	69b8      	ldr	r0, [r7, #24]
 8001b64:	f7fe fc58 	bl	8000418 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f004 f91e 	bl	8005db0 <sin>
 8001b74:	4604      	mov	r4, r0
 8001b76:	460d      	mov	r5, r1
 8001b78:	797b      	ldrb	r3, [r7, #5]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc3a 	bl	80003f4 <__aeabi_i2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fc9e 	bl	80004c8 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe ff32 	bl	80009fc <__aeabi_d2iz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);
 8001ba4:	69b8      	ldr	r0, [r7, #24]
 8001ba6:	f7fe fc37 	bl	8000418 <__aeabi_f2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f004 f8b7 	bl	8005d24 <cos>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	460d      	mov	r5, r1
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc19 	bl	80003f4 <__aeabi_i2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fc7d 	bl	80004c8 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ff11 	bl	80009fc <__aeabi_d2iz>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	4413      	add	r3, r2
 8001be4:	72bb      	strb	r3, [r7, #10]
        count++;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d00d      	beq.n	8001c10 <ssd1306_DrawArc+0x154>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001bf4:	69f8      	ldr	r0, [r7, #28]
 8001bf6:	f7ff f82f 	bl	8000c58 <__aeabi_ui2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f882 	bl	8000d08 <__aeabi_fmul>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff0a 	bl	8001a20 <ssd1306_DegToRad>
 8001c0c:	61b8      	str	r0, [r7, #24]
 8001c0e:	e007      	b.n	8001c20 <ssd1306_DrawArc+0x164>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f7ff f821 	bl	8000c58 <__aeabi_ui2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff01 	bl	8001a20 <ssd1306_DegToRad>
 8001c1e:	61b8      	str	r0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8001c20:	69b8      	ldr	r0, [r7, #24]
 8001c22:	f7fe fbf9 	bl	8000418 <__aeabi_f2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f004 f8bf 	bl	8005db0 <sin>
 8001c32:	4604      	mov	r4, r0
 8001c34:	460d      	mov	r5, r1
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fbdb 	bl	80003f4 <__aeabi_i2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe fc3f 	bl	80004c8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe fed3 	bl	80009fc <__aeabi_d2iz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4413      	add	r3, r2
 8001c60:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);
 8001c62:	69b8      	ldr	r0, [r7, #24]
 8001c64:	f7fe fbd8 	bl	8000418 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f004 f858 	bl	8005d24 <cos>
 8001c74:	4604      	mov	r4, r0
 8001c76:	460d      	mov	r5, r1
 8001c78:	797b      	ldrb	r3, [r7, #5]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fbba 	bl	80003f4 <__aeabi_i2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7fe fc1e 	bl	80004c8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe feb2 	bl	80009fc <__aeabi_d2iz>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001ca4:	7a3c      	ldrb	r4, [r7, #8]
 8001ca6:	7a7a      	ldrb	r2, [r7, #9]
 8001ca8:	7ab9      	ldrb	r1, [r7, #10]
 8001caa:	7af8      	ldrb	r0, [r7, #11]
 8001cac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	f7ff fe0c 	bl	80018d0 <ssd1306_Line>
    while(count < approx_segments)
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f4ff af43 	bcc.w	8001b48 <ssd1306_DrawArc+0x8c>
    }

    return;
 8001cc2:	bf00      	nop
}
 8001cc4:	3720      	adds	r7, #32
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	0800ae18 	.word	0x0800ae18
 8001cd0:	b60b60b7 	.word	0xb60b60b7
 8001cd4:	16c16c17 	.word	0x16c16c17

08001cd8 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	4604      	mov	r4, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	4603      	mov	r3, r0
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	717b      	strb	r3, [r7, #5]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1 = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	76fb      	strb	r3, [r7, #27]
    uint8_t xp2 = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t yp1 = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	76bb      	strb	r3, [r7, #26]
    uint8_t yp2 = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    uint32_t loc_sweep = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
    float rad;

    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001d12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fea9 	bl	8001a6c <ssd1306_NormalizeTo0_360>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	617b      	str	r3, [r7, #20]

    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fea3 	bl	8001a6c <ssd1306_NormalizeTo0_360>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4ba8      	ldr	r3, [pc, #672]	; (8001fcc <ssd1306_DrawArcWithRadiusLine+0x2f4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4aa7      	ldr	r2, [pc, #668]	; (8001fd0 <ssd1306_DrawArcWithRadiusLine+0x2f8>)
 8001d34:	fb82 1203 	smull	r1, r2, r2, r3
 8001d38:	441a      	add	r2, r3
 8001d3a:	1212      	asrs	r2, r2, #8
 8001d3c:	17db      	asrs	r3, r3, #31
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001d42:	4ba2      	ldr	r3, [pc, #648]	; (8001fcc <ssd1306_DrawArcWithRadiusLine+0x2f4>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	08db      	lsrs	r3, r3, #3
 8001d50:	4aa0      	ldr	r2, [pc, #640]	; (8001fd4 <ssd1306_DrawArcWithRadiusLine+0x2fc>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7fe ff7c 	bl	8000c58 <__aeabi_ui2f>
 8001d60:	4604      	mov	r4, r0
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f7fe ff78 	bl	8000c58 <__aeabi_ui2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff f87f 	bl	8000e70 <__aeabi_fdiv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	60fb      	str	r3, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001d76:	6a38      	ldr	r0, [r7, #32]
 8001d78:	f7fe ff6e 	bl	8000c58 <__aeabi_ui2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ffc1 	bl	8000d08 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe49 	bl	8001a20 <ssd1306_DegToRad>
 8001d8e:	61f8      	str	r0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sin(rad)*radius);
 8001d90:	69f8      	ldr	r0, [r7, #28]
 8001d92:	f7fe fb41 	bl	8000418 <__aeabi_f2d>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f004 f807 	bl	8005db0 <sin>
 8001da2:	4604      	mov	r4, r0
 8001da4:	460d      	mov	r5, r1
 8001da6:	797b      	ldrb	r3, [r7, #5]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fb23 	bl	80003f4 <__aeabi_i2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fb87 	bl	80004c8 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fe1b 	bl	80009fc <__aeabi_d2iz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4413      	add	r3, r2
 8001dd0:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cos(rad)*radius);
 8001dd2:	69f8      	ldr	r0, [r7, #28]
 8001dd4:	f7fe fb20 	bl	8000418 <__aeabi_f2d>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f003 ffa0 	bl	8005d24 <cos>
 8001de4:	4604      	mov	r4, r0
 8001de6:	460d      	mov	r5, r1
 8001de8:	797b      	ldrb	r3, [r7, #5]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb02 	bl	80003f4 <__aeabi_i2d>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fb66 	bl	80004c8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fdfa 	bl	80009fc <__aeabi_d2iz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	4413      	add	r3, r2
 8001e12:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 8001e14:	e0bb      	b.n	8001f8e <ssd1306_DrawArcWithRadiusLine+0x2b6>
        rad = ssd1306_DegToRad(count*approx_degree);
 8001e16:	6a38      	ldr	r0, [r7, #32]
 8001e18:	f7fe ff1e 	bl	8000c58 <__aeabi_ui2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff71 	bl	8000d08 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fdf9 	bl	8001a20 <ssd1306_DegToRad>
 8001e2e:	61f8      	str	r0, [r7, #28]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8001e30:	69f8      	ldr	r0, [r7, #28]
 8001e32:	f7fe faf1 	bl	8000418 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f003 ffb7 	bl	8005db0 <sin>
 8001e42:	4604      	mov	r4, r0
 8001e44:	460d      	mov	r5, r1
 8001e46:	797b      	ldrb	r3, [r7, #5]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fad3 	bl	80003f4 <__aeabi_i2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fb37 	bl	80004c8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fdcb 	bl	80009fc <__aeabi_d2iz>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	4413      	add	r3, r2
 8001e70:	76fb      	strb	r3, [r7, #27]
        yp1 = y + (int8_t)(cos(rad)*radius);
 8001e72:	69f8      	ldr	r0, [r7, #28]
 8001e74:	f7fe fad0 	bl	8000418 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f003 ff50 	bl	8005d24 <cos>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fab2 	bl	80003f4 <__aeabi_i2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe fb16 	bl	80004c8 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fdaa 	bl	80009fc <__aeabi_d2iz>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	76bb      	strb	r3, [r7, #26]
        count++;
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 8001eba:	6a3a      	ldr	r2, [r7, #32]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d00d      	beq.n	8001ede <ssd1306_DrawArcWithRadiusLine+0x206>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001ec2:	6a38      	ldr	r0, [r7, #32]
 8001ec4:	f7fe fec8 	bl	8000c58 <__aeabi_ui2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff1b 	bl	8000d08 <__aeabi_fmul>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fda3 	bl	8001a20 <ssd1306_DegToRad>
 8001eda:	61f8      	str	r0, [r7, #28]
 8001edc:	e007      	b.n	8001eee <ssd1306_DrawArcWithRadiusLine+0x216>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001ede:	6978      	ldr	r0, [r7, #20]
 8001ee0:	f7fe feba 	bl	8000c58 <__aeabi_ui2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fd9a 	bl	8001a20 <ssd1306_DegToRad>
 8001eec:	61f8      	str	r0, [r7, #28]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8001eee:	69f8      	ldr	r0, [r7, #28]
 8001ef0:	f7fe fa92 	bl	8000418 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f003 ff58 	bl	8005db0 <sin>
 8001f00:	4604      	mov	r4, r0
 8001f02:	460d      	mov	r5, r1
 8001f04:	797b      	ldrb	r3, [r7, #5]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fa74 	bl	80003f4 <__aeabi_i2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe fad8 	bl	80004c8 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fd6c 	bl	80009fc <__aeabi_d2iz>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        yp2 = y + (int8_t)(cos(rad)*radius);
 8001f32:	69f8      	ldr	r0, [r7, #28]
 8001f34:	f7fe fa70 	bl	8000418 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f003 fef0 	bl	8005d24 <cos>
 8001f44:	4604      	mov	r4, r0
 8001f46:	460d      	mov	r5, r1
 8001f48:	797b      	ldrb	r3, [r7, #5]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fa52 	bl	80003f4 <__aeabi_i2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe fab6 	bl	80004c8 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fd4a 	bl	80009fc <__aeabi_d2iz>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	79bb      	ldrb	r3, [r7, #6]
 8001f70:	4413      	add	r3, r2
 8001f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001f76:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001f7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f7e:	7eb9      	ldrb	r1, [r7, #26]
 8001f80:	7ef8      	ldrb	r0, [r7, #27]
 8001f82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4623      	mov	r3, r4
 8001f8a:	f7ff fca1 	bl	80018d0 <ssd1306_Line>
    while (count < approx_segments) {
 8001f8e:	6a3a      	ldr	r2, [r7, #32]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	f4ff af3f 	bcc.w	8001e16 <ssd1306_DrawArcWithRadiusLine+0x13e>
    }

    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001f98:	7abc      	ldrb	r4, [r7, #10]
 8001f9a:	7afa      	ldrb	r2, [r7, #11]
 8001f9c:	79b9      	ldrb	r1, [r7, #6]
 8001f9e:	79f8      	ldrb	r0, [r7, #7]
 8001fa0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	f7ff fc92 	bl	80018d0 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001fac:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001fb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001fb4:	79b9      	ldrb	r1, [r7, #6]
 8001fb6:	79f8      	ldrb	r0, [r7, #7]
 8001fb8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	f7ff fc86 	bl	80018d0 <ssd1306_Line>
    return;
 8001fc4:	bf00      	nop
}
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}
 8001fcc:	0800ae19 	.word	0x0800ae19
 8001fd0:	b60b60b7 	.word	0xb60b60b7
 8001fd4:	16c16c17 	.word	0x16c16c17

08001fd8 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	4603      	mov	r3, r0
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	717b      	strb	r3, [r7, #5]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001ff6:	797b      	ldrb	r3, [r7, #5]
 8001ff8:	425b      	negs	r3, r3
 8001ffa:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002000:	797b      	ldrb	r3, [r7, #5]
 8002002:	f1c3 0301 	rsb	r3, r3, #1
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db65      	blt.n	80020de <ssd1306_DrawCircle+0x106>
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	2b3f      	cmp	r3, #63	; 0x3f
 8002016:	d862      	bhi.n	80020de <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	b2d8      	uxtb	r0, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	4413      	add	r3, r2
 800202a:	b2db      	uxtb	r3, r3
 800202c:	793a      	ldrb	r2, [r7, #4]
 800202e:	4619      	mov	r1, r3
 8002030:	f7ff fb36 	bl	80016a0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4413      	add	r3, r2
 800203c:	b2d8      	uxtb	r0, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	4413      	add	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	793a      	ldrb	r2, [r7, #4]
 800204a:	4619      	mov	r1, r3
 800204c:	f7ff fb28 	bl	80016a0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4413      	add	r3, r2
 8002058:	b2d8      	uxtb	r0, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	79ba      	ldrb	r2, [r7, #6]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	793a      	ldrb	r2, [r7, #4]
 8002066:	4619      	mov	r1, r3
 8002068:	f7ff fb1a 	bl	80016a0 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	b2d8      	uxtb	r0, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	79ba      	ldrb	r2, [r7, #6]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	793a      	ldrb	r2, [r7, #4]
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff fb0c 	bl	80016a0 <ssd1306_DrawPixel>
        e2 = err;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	dc13      	bgt.n	80020bc <ssd1306_DrawCircle+0xe4>
            y++;
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	3301      	adds	r3, #1
 8002098:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	3301      	adds	r3, #1
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	425b      	negs	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d105      	bne.n	80020bc <ssd1306_DrawCircle+0xe4>
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dc01      	bgt.n	80020bc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dd08      	ble.n	80020d6 <ssd1306_DrawCircle+0xfe>
            x++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	3301      	adds	r3, #1
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	dd9d      	ble.n	8002018 <ssd1306_DrawCircle+0x40>

    return;
 80020dc:	e000      	b.n	80020e0 <ssd1306_DrawCircle+0x108>
        return;
 80020de:	bf00      	nop
}
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}

080020e6 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80020e6:	b590      	push	{r4, r7, lr}
 80020e8:	b089      	sub	sp, #36	; 0x24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4604      	mov	r4, r0
 80020ee:	4608      	mov	r0, r1
 80020f0:	4611      	mov	r1, r2
 80020f2:	461a      	mov	r2, r3
 80020f4:	4623      	mov	r3, r4
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4603      	mov	r3, r0
 80020fa:	71bb      	strb	r3, [r7, #6]
 80020fc:	460b      	mov	r3, r1
 80020fe:	717b      	strb	r3, [r7, #5]
 8002100:	4613      	mov	r3, r2
 8002102:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002104:	797b      	ldrb	r3, [r7, #5]
 8002106:	425b      	negs	r3, r3
 8002108:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 800210e:	797b      	ldrb	r3, [r7, #5]
 8002110:	f1c3 0301 	rsb	r3, r3, #1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db51      	blt.n	80021c4 <ssd1306_FillCircle+0xde>
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	2b3f      	cmp	r3, #63	; 0x3f
 8002124:	d84e      	bhi.n	80021c4 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	4413      	add	r3, r2
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e017      	b.n	8002162 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	79fa      	ldrb	r2, [r7, #7]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	73bb      	strb	r3, [r7, #14]
 800213c:	e008      	b.n	8002150 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 800213e:	793a      	ldrb	r2, [r7, #4]
 8002140:	7bf9      	ldrb	r1, [r7, #15]
 8002142:	7bbb      	ldrb	r3, [r7, #14]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff faab 	bl	80016a0 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	3b01      	subs	r3, #1
 800214e:	73bb      	strb	r3, [r7, #14]
 8002150:	7bba      	ldrb	r2, [r7, #14]
 8002152:	79f9      	ldrb	r1, [r7, #7]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	440b      	add	r3, r1
 8002158:	429a      	cmp	r2, r3
 800215a:	daf0      	bge.n	800213e <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	3b01      	subs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	79b9      	ldrb	r1, [r7, #6]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1acb      	subs	r3, r1, r3
 800216a:	429a      	cmp	r2, r3
 800216c:	dae1      	bge.n	8002132 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	429a      	cmp	r2, r3
 8002178:	dc13      	bgt.n	80021a2 <ssd1306_FillCircle+0xbc>
            y++;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	3301      	adds	r3, #1
 800217e:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	3301      	adds	r3, #1
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	425b      	negs	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	429a      	cmp	r2, r3
 8002194:	d105      	bne.n	80021a2 <ssd1306_FillCircle+0xbc>
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	dc01      	bgt.n	80021a2 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	dd08      	ble.n	80021bc <ssd1306_FillCircle+0xd6>
            x++;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	3301      	adds	r3, #1
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	ddb1      	ble.n	8002126 <ssd1306_FillCircle+0x40>

    return;
 80021c2:	e000      	b.n	80021c6 <ssd1306_FillCircle+0xe0>
        return;
 80021c4:	bf00      	nop
}
 80021c6:	3724      	adds	r7, #36	; 0x24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}

080021cc <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	4604      	mov	r4, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	4603      	mov	r3, r0
 80021e0:	71bb      	strb	r3, [r7, #6]
 80021e2:	460b      	mov	r3, r1
 80021e4:	717b      	strb	r3, [r7, #5]
 80021e6:	4613      	mov	r3, r2
 80021e8:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80021ea:	79bc      	ldrb	r4, [r7, #6]
 80021ec:	797a      	ldrb	r2, [r7, #5]
 80021ee:	79b9      	ldrb	r1, [r7, #6]
 80021f0:	79f8      	ldrb	r0, [r7, #7]
 80021f2:	7e3b      	ldrb	r3, [r7, #24]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4623      	mov	r3, r4
 80021f8:	f7ff fb6a 	bl	80018d0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80021fc:	793c      	ldrb	r4, [r7, #4]
 80021fe:	797a      	ldrb	r2, [r7, #5]
 8002200:	79b9      	ldrb	r1, [r7, #6]
 8002202:	7978      	ldrb	r0, [r7, #5]
 8002204:	7e3b      	ldrb	r3, [r7, #24]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4623      	mov	r3, r4
 800220a:	f7ff fb61 	bl	80018d0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800220e:	793c      	ldrb	r4, [r7, #4]
 8002210:	79fa      	ldrb	r2, [r7, #7]
 8002212:	7939      	ldrb	r1, [r7, #4]
 8002214:	7978      	ldrb	r0, [r7, #5]
 8002216:	7e3b      	ldrb	r3, [r7, #24]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4623      	mov	r3, r4
 800221c:	f7ff fb58 	bl	80018d0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002220:	79bc      	ldrb	r4, [r7, #6]
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	7939      	ldrb	r1, [r7, #4]
 8002226:	79f8      	ldrb	r0, [r7, #7]
 8002228:	7e3b      	ldrb	r3, [r7, #24]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4623      	mov	r3, r4
 800222e:	f7ff fb4f 	bl	80018d0 <ssd1306_Line>

    return;
 8002232:	bf00      	nop
}
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}

0800223a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800223a:	b590      	push	{r4, r7, lr}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	4604      	mov	r4, r0
 8002242:	4608      	mov	r0, r1
 8002244:	4611      	mov	r1, r2
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	4603      	mov	r3, r0
 800224e:	71bb      	strb	r3, [r7, #6]
 8002250:	460b      	mov	r3, r1
 8002252:	717b      	strb	r3, [r7, #5]
 8002254:	4613      	mov	r3, r2
 8002256:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	4293      	cmp	r3, r2
 800225e:	bf28      	it	cs
 8002260:	4613      	movcs	r3, r2
 8002262:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002264:	797a      	ldrb	r2, [r7, #5]
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	4293      	cmp	r3, r2
 800226a:	bf38      	it	cc
 800226c:	4613      	movcc	r3, r2
 800226e:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002270:	79ba      	ldrb	r2, [r7, #6]
 8002272:	793b      	ldrb	r3, [r7, #4]
 8002274:	4293      	cmp	r3, r2
 8002276:	bf28      	it	cs
 8002278:	4613      	movcs	r3, r2
 800227a:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800227c:	793a      	ldrb	r2, [r7, #4]
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	4293      	cmp	r3, r2
 8002282:	bf38      	it	cc
 8002284:	4613      	movcc	r3, r2
 8002286:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e017      	b.n	80022be <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800228e:	7b7b      	ldrb	r3, [r7, #13]
 8002290:	73bb      	strb	r3, [r7, #14]
 8002292:	e009      	b.n	80022a8 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002294:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002298:	7bf9      	ldrb	r1, [r7, #15]
 800229a:	7bbb      	ldrb	r3, [r7, #14]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f9ff 	bl	80016a0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	3301      	adds	r3, #1
 80022a6:	73bb      	strb	r3, [r7, #14]
 80022a8:	7bba      	ldrb	r2, [r7, #14]
 80022aa:	7b3b      	ldrb	r3, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d803      	bhi.n	80022b8 <ssd1306_FillRectangle+0x7e>
 80022b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	daed      	bge.n	8002294 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	3301      	adds	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	7abb      	ldrb	r3, [r7, #10]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d803      	bhi.n	80022ce <ssd1306_FillRectangle+0x94>
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b3f      	cmp	r3, #63	; 0x3f
 80022ca:	d9e0      	bls.n	800228e <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
}
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}

080022d6 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	603a      	str	r2, [r7, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
 80022e4:	460b      	mov	r3, r1
 80022e6:	71bb      	strb	r3, [r7, #6]
 80022e8:	4613      	mov	r3, r2
 80022ea:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80022ec:	797b      	ldrb	r3, [r7, #5]
 80022ee:	3307      	adds	r3, #7
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da00      	bge.n	80022f6 <ssd1306_DrawBitmap+0x20>
 80022f4:	3307      	adds	r3, #7
 80022f6:	10db      	asrs	r3, r3, #3
 80022f8:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db3e      	blt.n	8002384 <ssd1306_DrawBitmap+0xae>
 8002306:	79bb      	ldrb	r3, [r7, #6]
 8002308:	2b3f      	cmp	r3, #63	; 0x3f
 800230a:	d83b      	bhi.n	8002384 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800230c:	2300      	movs	r3, #0
 800230e:	73bb      	strb	r3, [r7, #14]
 8002310:	e033      	b.n	800237a <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002312:	2300      	movs	r3, #0
 8002314:	737b      	strb	r3, [r7, #13]
 8002316:	e026      	b.n	8002366 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002318:	7b7b      	ldrb	r3, [r7, #13]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e00d      	b.n	8002346 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800232a:	7bbb      	ldrb	r3, [r7, #14]
 800232c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	7b7a      	ldrb	r2, [r7, #13]
 8002336:	08d2      	lsrs	r2, r2, #3
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	4413      	add	r3, r2
 800233c:	461a      	mov	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	da08      	bge.n	8002360 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800234e:	79fa      	ldrb	r2, [r7, #7]
 8002350:	7b7b      	ldrb	r3, [r7, #13]
 8002352:	4413      	add	r3, r2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	7f3a      	ldrb	r2, [r7, #28]
 8002358:	79b9      	ldrb	r1, [r7, #6]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f9a0 	bl	80016a0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002360:	7b7b      	ldrb	r3, [r7, #13]
 8002362:	3301      	adds	r3, #1
 8002364:	737b      	strb	r3, [r7, #13]
 8002366:	7b7a      	ldrb	r2, [r7, #13]
 8002368:	797b      	ldrb	r3, [r7, #5]
 800236a:	429a      	cmp	r2, r3
 800236c:	d3d4      	bcc.n	8002318 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800236e:	7bbb      	ldrb	r3, [r7, #14]
 8002370:	3301      	adds	r3, #1
 8002372:	73bb      	strb	r3, [r7, #14]
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	3301      	adds	r3, #1
 8002378:	71bb      	strb	r3, [r7, #6]
 800237a:	7bba      	ldrb	r2, [r7, #14]
 800237c:	7e3b      	ldrb	r3, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d3c7      	bcc.n	8002312 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002382:	e000      	b.n	8002386 <ssd1306_DrawBitmap+0xb0>
        return;
 8002384:	bf00      	nop
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002396:	2381      	movs	r3, #129	; 0x81
 8002398:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f8a3 	bl	80014e8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f89f 	bl	80014e8 <ssd1306_WriteCommand>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80023c4:	23af      	movs	r3, #175	; 0xaf
 80023c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <ssd1306_SetDisplayOn+0x38>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	715a      	strb	r2, [r3, #5]
 80023ce:	e004      	b.n	80023da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80023d0:	23ae      	movs	r3, #174	; 0xae
 80023d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <ssd1306_SetDisplayOn+0x38>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f883 	bl	80014e8 <ssd1306_WriteCommand>
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000628 	.word	0x20000628

080023f0 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7ff f912 	bl	8001620 <ssd1306_Fill>

    uint8_t x = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8002404:	79b9      	ldrb	r1, [r7, #6]
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	2200      	movs	r2, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f948 	bl	80016a0 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <ssd1306_TestBorder+0x34>
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	2b7e      	cmp	r3, #126	; 0x7e
 800241a:	d803      	bhi.n	8002424 <ssd1306_TestBorder+0x34>
            x++;
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	3301      	adds	r3, #1
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	e016      	b.n	8002452 <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b7f      	cmp	r3, #127	; 0x7f
 8002428:	d106      	bne.n	8002438 <ssd1306_TestBorder+0x48>
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	2b3e      	cmp	r3, #62	; 0x3e
 800242e:	d803      	bhi.n	8002438 <ssd1306_TestBorder+0x48>
            y++;
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	3301      	adds	r3, #1
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	e00c      	b.n	8002452 <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0))
 8002438:	79bb      	ldrb	r3, [r7, #6]
 800243a:	2b3f      	cmp	r3, #63	; 0x3f
 800243c:	d106      	bne.n	800244c <ssd1306_TestBorder+0x5c>
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <ssd1306_TestBorder+0x5c>
            x--;
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	3b01      	subs	r3, #1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	e002      	b.n	8002452 <ssd1306_TestBorder+0x62>
        else
            y--;
 800244c:	79bb      	ldrb	r3, [r7, #6]
 800244e:	3b01      	subs	r3, #1
 8002450:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8002452:	79b9      	ldrb	r1, [r7, #6]
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	2201      	movs	r2, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f921 	bl	80016a0 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800245e:	f7ff f8f7 	bl	8001650 <ssd1306_UpdateScreen>

        HAL_Delay(5);
 8002462:	2005      	movs	r0, #5
 8002464:	f000 fd16 	bl	8002e94 <HAL_Delay>
    } while(x > 0 || y > 0);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ca      	bne.n	8002404 <ssd1306_TestBorder+0x14>
 800246e:	79bb      	ldrb	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1c7      	bne.n	8002404 <ssd1306_TestBorder+0x14>

    HAL_Delay(1000);
 8002474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002478:	f000 fd0c 	bl	8002e94 <HAL_Delay>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800248e:	2000      	movs	r0, #0
 8002490:	f7ff f8c6 	bl	8001620 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4619      	mov	r1, r3
 8002498:	2002      	movs	r0, #2
 800249a:	f7ff fa01 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <ssd1306_TestFonts1+0x88>)
 80024a0:	2301      	movs	r3, #1
 80024a2:	ca06      	ldmia	r2, {r1, r2}
 80024a4:	481a      	ldr	r0, [pc, #104]	; (8002510 <ssd1306_TestFonts1+0x8c>)
 80024a6:	f7ff f9d5 	bl	8001854 <ssd1306_WriteString>
    y += 26;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	331a      	adds	r3, #26
 80024ae:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff f9f3 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <ssd1306_TestFonts1+0x90>)
 80024bc:	2301      	movs	r3, #1
 80024be:	ca06      	ldmia	r2, {r1, r2}
 80024c0:	4815      	ldr	r0, [pc, #84]	; (8002518 <ssd1306_TestFonts1+0x94>)
 80024c2:	f7ff f9c7 	bl	8001854 <ssd1306_WriteString>
    y += 18;
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	3312      	adds	r3, #18
 80024ca:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4619      	mov	r1, r3
 80024d0:	2002      	movs	r0, #2
 80024d2:	f7ff f9e5 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <ssd1306_TestFonts1+0x98>)
 80024d8:	2301      	movs	r3, #1
 80024da:	ca06      	ldmia	r2, {r1, r2}
 80024dc:	4810      	ldr	r0, [pc, #64]	; (8002520 <ssd1306_TestFonts1+0x9c>)
 80024de:	f7ff f9b9 	bl	8001854 <ssd1306_WriteString>
    y += 10;
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	330a      	adds	r3, #10
 80024e6:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	4619      	mov	r1, r3
 80024ec:	2002      	movs	r0, #2
 80024ee:	f7ff f9d7 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80024f2:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <ssd1306_TestFonts1+0xa0>)
 80024f4:	2301      	movs	r3, #1
 80024f6:	ca06      	ldmia	r2, {r1, r2}
 80024f8:	480b      	ldr	r0, [pc, #44]	; (8002528 <ssd1306_TestFonts1+0xa4>)
 80024fa:	f7ff f9ab 	bl	8001854 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 80024fe:	f7ff f8a7 	bl	8001650 <ssd1306_UpdateScreen>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000018 	.word	0x20000018
 8002510:	08006dc0 	.word	0x08006dc0
 8002514:	20000010 	.word	0x20000010
 8002518:	08006dcc 	.word	0x08006dcc
 800251c:	20000008 	.word	0x20000008
 8002520:	08006dd8 	.word	0x08006dd8
 8002524:	20000000 	.word	0x20000000
 8002528:	08006de4 	.word	0x08006de4

0800252c <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b085      	sub	sp, #20
 8002530:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff f874 	bl	8001620 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8002538:	2104      	movs	r1, #4
 800253a:	2000      	movs	r0, #0
 800253c:	f7ff f9b0 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002540:	4a13      	ldr	r2, [pc, #76]	; (8002590 <ssd1306_TestFonts2+0x64>)
 8002542:	2301      	movs	r3, #1
 8002544:	ca06      	ldmia	r2, {r1, r2}
 8002546:	4813      	ldr	r0, [pc, #76]	; (8002594 <ssd1306_TestFonts2+0x68>)
 8002548:	f7ff f984 	bl	8001854 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 800254c:	2124      	movs	r1, #36	; 0x24
 800254e:	2000      	movs	r0, #0
 8002550:	f7ff f9a6 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <ssd1306_TestFonts2+0x64>)
 8002556:	2301      	movs	r3, #1
 8002558:	ca06      	ldmia	r2, {r1, r2}
 800255a:	480f      	ldr	r0, [pc, #60]	; (8002598 <ssd1306_TestFonts2+0x6c>)
 800255c:	f7ff f97a 	bl	8001854 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002560:	2360      	movs	r3, #96	; 0x60
 8002562:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002564:	233c      	movs	r3, #60	; 0x3c
 8002566:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3310      	adds	r3, #16
 800256c:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	3302      	adds	r3, #2
 8002572:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002574:	793b      	ldrb	r3, [r7, #4]
 8002576:	797a      	ldrb	r2, [r7, #5]
 8002578:	79b9      	ldrb	r1, [r7, #6]
 800257a:	79f8      	ldrb	r0, [r7, #7]
 800257c:	2401      	movs	r4, #1
 800257e:	9400      	str	r4, [sp, #0]
 8002580:	f7ff fe5b 	bl	800223a <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002584:	f7ff f864 	bl	8001650 <ssd1306_UpdateScreen>
#endif
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	20000020 	.word	0x20000020
 8002594:	08006df0 	.word	0x08006df0
 8002598:	08006dfc 	.word	0x08006dfc

0800259c <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b098      	sub	sp, #96	; 0x60
 80025a0:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff f83c 	bl	8001620 <ssd1306_Fill>

    uint32_t start = HAL_GetTick();
 80025a8:	f000 fc6a 	bl	8002e80 <HAL_GetTick>
 80025ac:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 80025ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b0:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80025b6:	4a42      	ldr	r2, [pc, #264]	; (80026c0 <ssd1306_TestFPS+0x124>)
 80025b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80025be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    ssd1306_SetCursor(2,0);
 80025c2:	2100      	movs	r1, #0
 80025c4:	2002      	movs	r0, #2
 80025c6:	f7ff f96b 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 80025ca:	4a3e      	ldr	r2, [pc, #248]	; (80026c4 <ssd1306_TestFPS+0x128>)
 80025cc:	2300      	movs	r3, #0
 80025ce:	ca06      	ldmia	r2, {r1, r2}
 80025d0:	483d      	ldr	r0, [pc, #244]	; (80026c8 <ssd1306_TestFPS+0x12c>)
 80025d2:	f7ff f93f 	bl	8001854 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 80025d6:	2124      	movs	r1, #36	; 0x24
 80025d8:	2002      	movs	r0, #2
 80025da:	f7ff f961 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 80025de:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <ssd1306_TestFPS+0x128>)
 80025e0:	2300      	movs	r3, #0
 80025e2:	ca06      	ldmia	r2, {r1, r2}
 80025e4:	4839      	ldr	r0, [pc, #228]	; (80026cc <ssd1306_TestFPS+0x130>)
 80025e6:	f7ff f935 	bl	8001854 <ssd1306_WriteString>

    do {
        ssd1306_SetCursor(2, 18);
 80025ea:	2112      	movs	r1, #18
 80025ec:	2002      	movs	r0, #2
 80025ee:	f7ff f957 	bl	80018a0 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 80025f2:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <ssd1306_TestFPS+0x128>)
 80025f4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80025f8:	2300      	movs	r3, #0
 80025fa:	ca06      	ldmia	r2, {r1, r2}
 80025fc:	f7ff f92a 	bl	8001854 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002600:	f7ff f826 	bl	8001650 <ssd1306_UpdateScreen>

        char ch = message[0];
 8002604:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002608:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 800260c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002610:	3301      	adds	r3, #1
 8002612:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002616:	220a      	movs	r2, #10
 8002618:	4619      	mov	r1, r3
 800261a:	f002 fefb 	bl	8005414 <memmove>
        message[sizeof(message)-2] = ch;
 800261e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002622:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8002626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002628:	3301      	adds	r3, #1
 800262a:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 800262c:	f000 fc28 	bl	8002e80 <HAL_GetTick>
 8002630:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8002632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002634:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3287 	movw	r2, #4999	; 0x1387
 800263c:	4293      	cmp	r3, r2
 800263e:	d9d4      	bls.n	80025ea <ssd1306_TestFPS+0x4e>

    HAL_Delay(5000);
 8002640:	f241 3088 	movw	r0, #5000	; 0x1388
 8002644:	f000 fc26 	bl	8002e94 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8002648:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800264a:	f7fe fb09 	bl	8000c60 <__aeabi_i2f>
 800264e:	4603      	mov	r3, r0
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd fee1 	bl	8000418 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800265c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd feb7 	bl	80003d4 <__aeabi_ui2d>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <ssd1306_TestFPS+0x134>)
 800266c:	f7fe f856 	bl	800071c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fe f850 	bl	800071c <__aeabi_ddiv>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe f9ba 	bl	80009fc <__aeabi_d2iz>
 8002688:	4603      	mov	r3, r0
 800268a:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 800268c:	1d38      	adds	r0, r7, #4
 800268e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002690:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <ssd1306_TestFPS+0x138>)
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	f002 fee0 	bl	8005458 <sniprintf>

    ssd1306_Fill(White);
 8002698:	2001      	movs	r0, #1
 800269a:	f7fe ffc1 	bl	8001620 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 800269e:	2102      	movs	r1, #2
 80026a0:	2002      	movs	r0, #2
 80026a2:	f7ff f8fd 	bl	80018a0 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <ssd1306_TestFPS+0x128>)
 80026a8:	1d38      	adds	r0, r7, #4
 80026aa:	2300      	movs	r3, #0
 80026ac:	ca06      	ldmia	r2, {r1, r2}
 80026ae:	f7ff f8d1 	bl	8001854 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80026b2:	f7fe ffcd 	bl	8001650 <ssd1306_UpdateScreen>
}
 80026b6:	bf00      	nop
 80026b8:	3760      	adds	r7, #96	; 0x60
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}
 80026be:	bf00      	nop
 80026c0:	08006e28 	.word	0x08006e28
 80026c4:	20000010 	.word	0x20000010
 80026c8:	08006e08 	.word	0x08006e08
 80026cc:	08006e14 	.word	0x08006e14
 80026d0:	408f4000 	.word	0x408f4000
 80026d4:	08006e20 	.word	0x08006e20

080026d8 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 80026de:	2301      	movs	r3, #1
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	233f      	movs	r3, #63	; 0x3f
 80026e4:	227f      	movs	r2, #127	; 0x7f
 80026e6:	2101      	movs	r1, #1
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff f8f1 	bl	80018d0 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 80026ee:	2301      	movs	r3, #1
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	233f      	movs	r3, #63	; 0x3f
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	207f      	movs	r0, #127	; 0x7f
 80026fa:	f7ff f8e9 	bl	80018d0 <ssd1306_Line>
  ssd1306_UpdateScreen();
 80026fe:	f7fe ffa7 	bl	8001650 <ssd1306_UpdateScreen>
  return;
 8002702:	bf00      	nop
}
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	e028      	b.n	8002766 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4413      	add	r3, r2
 800271e:	b2db      	uxtb	r3, r3
 8002720:	3301      	adds	r3, #1
 8002722:	b2d8      	uxtb	r0, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	4413      	add	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3301      	adds	r3, #1
 8002732:	b2d9      	uxtb	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	4413      	add	r3, r2
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002744:	b2da      	uxtb	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461c      	mov	r4, r3
 800274c:	00a4      	lsls	r4, r4, #2
 800274e:	4423      	add	r3, r4
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2401      	movs	r4, #1
 800275a:	9400      	str	r4, [sp, #0]
 800275c:	f7ff fd36 	bl	80021cc <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3301      	adds	r3, #1
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d9d3      	bls.n	8002714 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 800276c:	f7fe ff70 	bl	8001650 <ssd1306_UpdateScreen>
  return;
 8002770:	bf00      	nop
}
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bd90      	pop	{r4, r7, pc}

08002778 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 800277e:	2301      	movs	r3, #1
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2323      	movs	r3, #35	; 0x23
 8002784:	2241      	movs	r2, #65	; 0x41
 8002786:	2101      	movs	r1, #1
 8002788:	201f      	movs	r0, #31
 800278a:	f7ff fd56 	bl	800223a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 800278e:	2301      	movs	r3, #1
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	233c      	movs	r3, #60	; 0x3c
 8002794:	2246      	movs	r2, #70	; 0x46
 8002796:	212d      	movs	r1, #45	; 0x2d
 8002798:	200a      	movs	r0, #10
 800279a:	f7ff fd4e 	bl	800223a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 800279e:	2301      	movs	r3, #1
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	232d      	movs	r3, #45	; 0x2d
 80027a4:	2264      	movs	r2, #100	; 0x64
 80027a6:	210a      	movs	r1, #10
 80027a8:	204b      	movs	r0, #75	; 0x4b
 80027aa:	f7ff fd46 	bl	800223a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2337      	movs	r3, #55	; 0x37
 80027b4:	2250      	movs	r2, #80	; 0x50
 80027b6:	211e      	movs	r1, #30
 80027b8:	2037      	movs	r0, #55	; 0x37
 80027ba:	f7ff fd3e 	bl	800223a <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 80027be:	f7fe ff47 	bl	8001650 <ssd1306_UpdateScreen>
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	e010      	b.n	80027f6 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	331e      	adds	r3, #30
 80027e4:	b2d8      	uxtb	r0, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	220a      	movs	r2, #10
 80027ea:	210f      	movs	r1, #15
 80027ec:	f7ff fbf4 	bl	8001fd8 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3301      	adds	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d9eb      	bls.n	80027d4 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	e011      	b.n	8002826 <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	441a      	add	r2, r3
 800280c:	00d2      	lsls	r2, r2, #3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	330f      	adds	r3, #15
 8002814:	b2d8      	uxtb	r0, r3
 8002816:	2301      	movs	r3, #1
 8002818:	220a      	movs	r2, #10
 800281a:	2128      	movs	r1, #40	; 0x28
 800281c:	f7ff fc63 	bl	80020e6 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3301      	adds	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d9ea      	bls.n	8002802 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 800282c:	f7fe ff10 	bl	8001650 <ssd1306_UpdateScreen>
  return;
 8002830:	bf00      	nop
}
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 800283e:	2301      	movs	r3, #1
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2314      	movs	r3, #20
 800284a:	221e      	movs	r2, #30
 800284c:	211e      	movs	r1, #30
 800284e:	201e      	movs	r0, #30
 8002850:	f7ff f934 	bl	8001abc <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002854:	2301      	movs	r3, #1
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	231e      	movs	r3, #30
 8002860:	220a      	movs	r2, #10
 8002862:	2137      	movs	r1, #55	; 0x37
 8002864:	2050      	movs	r0, #80	; 0x50
 8002866:	f7ff fa37 	bl	8001cd8 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800286a:	f7fe fef1 	bl	8001650 <ssd1306_UpdateScreen>
  return;
 800286e:	bf00      	nop
}
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <ssd1306_TestPolyline+0x28>)
 800287c:	463c      	mov	r4, r7
 800287e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002880:	c407      	stmia	r4!, {r0, r1, r2}
 8002882:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002884:	463b      	mov	r3, r7
 8002886:	2201      	movs	r2, #1
 8002888:	2107      	movs	r1, #7
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f88c 	bl	80019a8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002890:	f7fe fede 	bl	8001650 <ssd1306_UpdateScreen>
  return;
 8002894:	bf00      	nop
}
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	08006e34 	.word	0x08006e34

080028a0 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7fe feba 	bl	8001620 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80028ac:	2300      	movs	r3, #0
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	2340      	movs	r3, #64	; 0x40
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <ssd1306_TestDrawBitmap+0x78>)
 80028b8:	2100      	movs	r1, #0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7ff fd0b 	bl	80022d6 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80028c0:	f7fe fec6 	bl	8001650 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80028c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028c8:	f000 fae4 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(Black);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe fea7 	bl	8001620 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80028d2:	2301      	movs	r3, #1
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2340      	movs	r3, #64	; 0x40
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <ssd1306_TestDrawBitmap+0x7c>)
 80028de:	2100      	movs	r1, #0
 80028e0:	2020      	movs	r0, #32
 80028e2:	f7ff fcf8 	bl	80022d6 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80028e6:	f7fe feb3 	bl	8001650 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80028ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80028ee:	f000 fad1 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(White);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7fe fe94 	bl	8001620 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80028f8:	2300      	movs	r3, #0
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2340      	movs	r3, #64	; 0x40
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2340      	movs	r3, #64	; 0x40
 8002902:	4a06      	ldr	r2, [pc, #24]	; (800291c <ssd1306_TestDrawBitmap+0x7c>)
 8002904:	2100      	movs	r1, #0
 8002906:	2020      	movs	r0, #32
 8002908:	f7ff fce5 	bl	80022d6 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800290c:	f7fe fea0 	bl	8001650 <ssd1306_UpdateScreen>
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	0800ae1c 	.word	0x0800ae1c
 800291c:	0800b21c 	.word	0x0800b21c

08002920 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002924:	f7fe fe12 	bl	800154c <ssd1306_Init>

    ssd1306_TestFPS();
 8002928:	f7ff fe38 	bl	800259c <ssd1306_TestFPS>
    HAL_Delay(3000);
 800292c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002930:	f000 fab0 	bl	8002e94 <HAL_Delay>
    ssd1306_TestBorder();
 8002934:	f7ff fd5c 	bl	80023f0 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002938:	f7ff fda4 	bl	8002484 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 800293c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002940:	f000 faa8 	bl	8002e94 <HAL_Delay>
    ssd1306_TestFonts2();
 8002944:	f7ff fdf2 	bl	800252c <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002948:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800294c:	f000 faa2 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(Black);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe fe65 	bl	8001620 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002956:	f7ff fed7 	bl	8002708 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800295a:	f7ff febd 	bl	80026d8 <ssd1306_TestLine>
    HAL_Delay(3000);
 800295e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002962:	f000 fa97 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(Black);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fe5a 	bl	8001620 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 800296c:	f7ff ff04 	bl	8002778 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002970:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002974:	f000 fa8e 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(Black);
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe fe51 	bl	8001620 <ssd1306_Fill>
    ssd1306_TestPolyline();
 800297e:	f7ff ff79 	bl	8002874 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002982:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002986:	f000 fa85 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(Black);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fe48 	bl	8001620 <ssd1306_Fill>
    ssd1306_TestArc();
 8002990:	f7ff ff52 	bl	8002838 <ssd1306_TestArc>
    HAL_Delay(3000);
 8002994:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002998:	f000 fa7c 	bl	8002e94 <HAL_Delay>
    ssd1306_Fill(Black);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fe3f 	bl	8001620 <ssd1306_Fill>
    ssd1306_TestCircle();
 80029a2:	f7ff ff11 	bl	80027c8 <ssd1306_TestCircle>
    HAL_Delay(3000);
 80029a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80029aa:	f000 fa73 	bl	8002e94 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 80029ae:	f7ff ff77 	bl	80028a0 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 80029b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80029b6:	f000 fa6d 	bl	8002e94 <HAL_Delay>
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_MspInit+0x40>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_MspInit+0x40>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6193      	str	r3, [r2, #24]
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_MspInit+0x40>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_MspInit+0x40>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_MspInit+0x40>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	61d3      	str	r3, [r2, #28]
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_MspInit+0x40>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <HAL_I2C_MspInit+0x74>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d124      	bne.n	8002a6e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_I2C_MspInit+0x78>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_I2C_MspInit+0x78>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_I2C_MspInit+0x78>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a42:	2312      	movs	r3, #18
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <HAL_I2C_MspInit+0x7c>)
 8002a52:	f000 fb51 	bl	80030f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_I2C_MspInit+0x78>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_I2C_MspInit+0x78>)
 8002a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_I2C_MspInit+0x78>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40005800 	.word	0x40005800
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40010c00 	.word	0x40010c00

08002a84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d12d      	bne.n	8002b00 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002aaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b48      	ldr	r3, [pc, #288]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abc:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a44      	ldr	r2, [pc, #272]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0320 	add.w	r3, r7, #32
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	483b      	ldr	r0, [pc, #236]	; (8002bd8 <HAL_TIM_Encoder_MspInit+0x154>)
 8002aea:	f000 fb05 	bl	80030f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	2019      	movs	r0, #25
 8002af4:	f000 fac9 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002af8:	2019      	movs	r0, #25
 8002afa:	f000 fae2 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002afe:	e062      	b.n	8002bc6 <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <HAL_TIM_Encoder_MspInit+0x158>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d12c      	bne.n	8002b64 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0a:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b10:	f043 0302 	orr.w	r3, r3, #2
 8002b14:	61d3      	str	r3, [r2, #28]
 8002b16:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6193      	str	r3, [r2, #24]
 8002b2e:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b3a:	23c0      	movs	r3, #192	; 0xc0
 8002b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4822      	ldr	r0, [pc, #136]	; (8002bd8 <HAL_TIM_Encoder_MspInit+0x154>)
 8002b4e:	f000 fad3 	bl	80030f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	201d      	movs	r0, #29
 8002b58:	f000 fa97 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b5c:	201d      	movs	r0, #29
 8002b5e:	f000 fab0 	bl	80030c2 <HAL_NVIC_EnableIRQ>
}
 8002b62:	e030      	b.n	8002bc6 <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12b      	bne.n	8002bc6 <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	61d3      	str	r3, [r2, #28]
 8002b7a:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6193      	str	r3, [r2, #24]
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x150>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b9e:	23c0      	movs	r3, #192	; 0xc0
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002baa:	f107 0320 	add.w	r3, r7, #32
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <HAL_TIM_Encoder_MspInit+0x160>)
 8002bb2:	f000 faa1 	bl	80030f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	201e      	movs	r0, #30
 8002bbc:	f000 fa65 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bc0:	201e      	movs	r0, #30
 8002bc2:	f000 fa7e 	bl	80030c2 <HAL_NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3730      	adds	r7, #48	; 0x30
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40010800 	.word	0x40010800
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40010c00 	.word	0x40010c00

08002be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d10b      	bne.n	8002c12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_TIM_Base_MspInit+0x34>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_TIM_Base_MspInit+0x34>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	61d3      	str	r3, [r2, #28]
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_TIM_Base_MspInit+0x34>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3e:	d117      	bne.n	8002c70 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_TIM_MspPostInit+0x58>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_TIM_MspPostInit+0x58>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6193      	str	r3, [r2, #24]
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_TIM_MspPostInit+0x58>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c58:	2307      	movs	r3, #7
 8002c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2302      	movs	r3, #2
 8002c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4804      	ldr	r0, [pc, #16]	; (8002c7c <HAL_TIM_MspPostInit+0x5c>)
 8002c6c:	f000 fa44 	bl	80030f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010800 	.word	0x40010800

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <NMI_Handler+0x4>

08002c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <HardFault_Handler+0x4>

08002c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <MemManage_Handler+0x4>

08002c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <BusFault_Handler+0x4>

08002c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <UsageFault_Handler+0x4>

08002c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc6:	f000 f8c9 	bl	8002e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <TIM1_UP_IRQHandler+0x10>)
 8002cd6:	f001 fdb6 	bl	8004846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000108 	.word	0x20000108

08002ce4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <TIM3_IRQHandler+0x10>)
 8002cea:	f001 fdac 	bl	8004846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000198 	.word	0x20000198

08002cf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM4_IRQHandler+0x10>)
 8002cfe:	f001 fda2 	bl	8004846 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200001e0 	.word	0x200001e0

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f002 fb32 	bl	80053a4 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20005000 	.word	0x20005000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000630 	.word	0x20000630
 8002d74:	20000648 	.word	0x20000648

08002d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d84:	f7ff fff8 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d88:	480b      	ldr	r0, [pc, #44]	; (8002db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d8a:	490c      	ldr	r1, [pc, #48]	; (8002dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d8c:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d90:	e002      	b.n	8002d98 <LoopCopyDataInit>

08002d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d96:	3304      	adds	r3, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d9c:	d3f9      	bcc.n	8002d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002da0:	4c09      	ldr	r4, [pc, #36]	; (8002dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da4:	e001      	b.n	8002daa <LoopFillZerobss>

08002da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da8:	3204      	adds	r2, #4

08002daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dac:	d3fb      	bcc.n	8002da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dae:	f002 faff 	bl	80053b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002db2:	f7fe f8f9 	bl	8000fa8 <main>
  bx lr
 8002db6:	4770      	bx	lr
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002dc0:	0800b660 	.word	0x0800b660
  ldr r2, =_sbss
 8002dc4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002dc8:	20000648 	.word	0x20000648

08002dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC1_2_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_Init+0x28>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <HAL_Init+0x28>)
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de0:	2003      	movs	r0, #3
 8002de2:	f000 f947 	bl	8003074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de6:	200f      	movs	r0, #15
 8002de8:	f000 f808 	bl	8002dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dec:	f7ff fde8 	bl	80029c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40022000 	.word	0x40022000

08002dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_InitTick+0x54>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_InitTick+0x58>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f95f 	bl	80030de <HAL_SYSTICK_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00e      	b.n	8002e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d80a      	bhi.n	8002e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e30:	2200      	movs	r2, #0
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e38:	f000 f927 	bl	800308a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e3c:	4a06      	ldr	r2, [pc, #24]	; (8002e58 <HAL_InitTick+0x5c>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000028 	.word	0x20000028
 8002e54:	20000030 	.word	0x20000030
 8002e58:	2000002c 	.word	0x2000002c

08002e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_IncTick+0x1c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_IncTick+0x20>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <HAL_IncTick+0x20>)
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	20000030 	.word	0x20000030
 8002e7c:	20000634 	.word	0x20000634

08002e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <HAL_GetTick+0x10>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000634 	.word	0x20000634

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff fff0 	bl	8002e80 <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eac:	d005      	beq.n	8002eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_Delay+0x44>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eba:	bf00      	nop
 8002ebc:	f7ff ffe0 	bl	8002e80 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d8f7      	bhi.n	8002ebc <HAL_Delay+0x28>
  {
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000030 	.word	0x20000030

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4906      	ldr	r1, [pc, #24]	; (8002f74 <__NVIC_EnableIRQ+0x34>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003040:	d301      	bcc.n	8003046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003042:	2301      	movs	r3, #1
 8003044:	e00f      	b.n	8003066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <SysTick_Config+0x40>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304e:	210f      	movs	r1, #15
 8003050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003054:	f7ff ff90 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SysTick_Config+0x40>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SysTick_Config+0x40>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff2d 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800309c:	f7ff ff42 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7ff ff90 	bl	8002fcc <NVIC_EncodePriority>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff5f 	bl	8002f78 <__NVIC_SetPriority>
}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff35 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ffa2 	bl	8003030 <SysTick_Config>
 80030ec:	4603      	mov	r3, r0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b08b      	sub	sp, #44	; 0x2c
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310a:	e169      	b.n	80033e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800310c:	2201      	movs	r2, #1
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 8158 	bne.w	80033da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a9a      	ldr	r2, [pc, #616]	; (8003398 <HAL_GPIO_Init+0x2a0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d05e      	beq.n	80031f2 <HAL_GPIO_Init+0xfa>
 8003134:	4a98      	ldr	r2, [pc, #608]	; (8003398 <HAL_GPIO_Init+0x2a0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d875      	bhi.n	8003226 <HAL_GPIO_Init+0x12e>
 800313a:	4a98      	ldr	r2, [pc, #608]	; (800339c <HAL_GPIO_Init+0x2a4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d058      	beq.n	80031f2 <HAL_GPIO_Init+0xfa>
 8003140:	4a96      	ldr	r2, [pc, #600]	; (800339c <HAL_GPIO_Init+0x2a4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d86f      	bhi.n	8003226 <HAL_GPIO_Init+0x12e>
 8003146:	4a96      	ldr	r2, [pc, #600]	; (80033a0 <HAL_GPIO_Init+0x2a8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d052      	beq.n	80031f2 <HAL_GPIO_Init+0xfa>
 800314c:	4a94      	ldr	r2, [pc, #592]	; (80033a0 <HAL_GPIO_Init+0x2a8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d869      	bhi.n	8003226 <HAL_GPIO_Init+0x12e>
 8003152:	4a94      	ldr	r2, [pc, #592]	; (80033a4 <HAL_GPIO_Init+0x2ac>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04c      	beq.n	80031f2 <HAL_GPIO_Init+0xfa>
 8003158:	4a92      	ldr	r2, [pc, #584]	; (80033a4 <HAL_GPIO_Init+0x2ac>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d863      	bhi.n	8003226 <HAL_GPIO_Init+0x12e>
 800315e:	4a92      	ldr	r2, [pc, #584]	; (80033a8 <HAL_GPIO_Init+0x2b0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d046      	beq.n	80031f2 <HAL_GPIO_Init+0xfa>
 8003164:	4a90      	ldr	r2, [pc, #576]	; (80033a8 <HAL_GPIO_Init+0x2b0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d85d      	bhi.n	8003226 <HAL_GPIO_Init+0x12e>
 800316a:	2b12      	cmp	r3, #18
 800316c:	d82a      	bhi.n	80031c4 <HAL_GPIO_Init+0xcc>
 800316e:	2b12      	cmp	r3, #18
 8003170:	d859      	bhi.n	8003226 <HAL_GPIO_Init+0x12e>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <HAL_GPIO_Init+0x80>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	080031f3 	.word	0x080031f3
 800317c:	080031cd 	.word	0x080031cd
 8003180:	080031df 	.word	0x080031df
 8003184:	08003221 	.word	0x08003221
 8003188:	08003227 	.word	0x08003227
 800318c:	08003227 	.word	0x08003227
 8003190:	08003227 	.word	0x08003227
 8003194:	08003227 	.word	0x08003227
 8003198:	08003227 	.word	0x08003227
 800319c:	08003227 	.word	0x08003227
 80031a0:	08003227 	.word	0x08003227
 80031a4:	08003227 	.word	0x08003227
 80031a8:	08003227 	.word	0x08003227
 80031ac:	08003227 	.word	0x08003227
 80031b0:	08003227 	.word	0x08003227
 80031b4:	08003227 	.word	0x08003227
 80031b8:	08003227 	.word	0x08003227
 80031bc:	080031d5 	.word	0x080031d5
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	4a79      	ldr	r2, [pc, #484]	; (80033ac <HAL_GPIO_Init+0x2b4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ca:	e02c      	b.n	8003226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	623b      	str	r3, [r7, #32]
          break;
 80031d2:	e029      	b.n	8003228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	3304      	adds	r3, #4
 80031da:	623b      	str	r3, [r7, #32]
          break;
 80031dc:	e024      	b.n	8003228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	3308      	adds	r3, #8
 80031e4:	623b      	str	r3, [r7, #32]
          break;
 80031e6:	e01f      	b.n	8003228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	330c      	adds	r3, #12
 80031ee:	623b      	str	r3, [r7, #32]
          break;
 80031f0:	e01a      	b.n	8003228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031fa:	2304      	movs	r3, #4
 80031fc:	623b      	str	r3, [r7, #32]
          break;
 80031fe:	e013      	b.n	8003228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003208:	2308      	movs	r3, #8
 800320a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	611a      	str	r2, [r3, #16]
          break;
 8003212:	e009      	b.n	8003228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003214:	2308      	movs	r3, #8
 8003216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	615a      	str	r2, [r3, #20]
          break;
 800321e:	e003      	b.n	8003228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
          break;
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x130>
          break;
 8003226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d801      	bhi.n	8003232 <HAL_GPIO_Init+0x13a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	e001      	b.n	8003236 <HAL_GPIO_Init+0x13e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2bff      	cmp	r3, #255	; 0xff
 800323c:	d802      	bhi.n	8003244 <HAL_GPIO_Init+0x14c>
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	e002      	b.n	800324a <HAL_GPIO_Init+0x152>
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	3b08      	subs	r3, #8
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	210f      	movs	r1, #15
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	6a39      	ldr	r1, [r7, #32]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	431a      	orrs	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80b1 	beq.w	80033da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003278:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <HAL_GPIO_Init+0x2b8>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <HAL_GPIO_Init+0x2b8>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <HAL_GPIO_Init+0x2b8>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003290:	4a48      	ldr	r2, [pc, #288]	; (80033b4 <HAL_GPIO_Init+0x2bc>)
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	220f      	movs	r2, #15
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a40      	ldr	r2, [pc, #256]	; (80033b8 <HAL_GPIO_Init+0x2c0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <HAL_GPIO_Init+0x1ec>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <HAL_GPIO_Init+0x2c4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00d      	beq.n	80032e0 <HAL_GPIO_Init+0x1e8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3e      	ldr	r2, [pc, #248]	; (80033c0 <HAL_GPIO_Init+0x2c8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <HAL_GPIO_Init+0x1e4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3d      	ldr	r2, [pc, #244]	; (80033c4 <HAL_GPIO_Init+0x2cc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_GPIO_Init+0x1e0>
 80032d4:	2303      	movs	r3, #3
 80032d6:	e006      	b.n	80032e6 <HAL_GPIO_Init+0x1ee>
 80032d8:	2304      	movs	r3, #4
 80032da:	e004      	b.n	80032e6 <HAL_GPIO_Init+0x1ee>
 80032dc:	2302      	movs	r3, #2
 80032de:	e002      	b.n	80032e6 <HAL_GPIO_Init+0x1ee>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <HAL_GPIO_Init+0x1ee>
 80032e4:	2300      	movs	r3, #0
 80032e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e8:	f002 0203 	and.w	r2, r2, #3
 80032ec:	0092      	lsls	r2, r2, #2
 80032ee:	4093      	lsls	r3, r2
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032f6:	492f      	ldr	r1, [pc, #188]	; (80033b4 <HAL_GPIO_Init+0x2bc>)
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003310:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	492c      	ldr	r1, [pc, #176]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	608b      	str	r3, [r1, #8]
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	43db      	mvns	r3, r3
 8003326:	4928      	ldr	r1, [pc, #160]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003328:	4013      	ands	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	4922      	ldr	r1, [pc, #136]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	60cb      	str	r3, [r1, #12]
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	43db      	mvns	r3, r3
 800334e:	491e      	ldr	r1, [pc, #120]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003350:	4013      	ands	r3, r2
 8003352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4918      	ldr	r1, [pc, #96]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	4914      	ldr	r1, [pc, #80]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 8003378:	4013      	ands	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d021      	beq.n	80033cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	e021      	b.n	80033da <HAL_GPIO_Init+0x2e2>
 8003396:	bf00      	nop
 8003398:	10320000 	.word	0x10320000
 800339c:	10310000 	.word	0x10310000
 80033a0:	10220000 	.word	0x10220000
 80033a4:	10210000 	.word	0x10210000
 80033a8:	10120000 	.word	0x10120000
 80033ac:	10110000 	.word	0x10110000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40010800 	.word	0x40010800
 80033bc:	40010c00 	.word	0x40010c00
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40011400 	.word	0x40011400
 80033c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_GPIO_Init+0x304>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	4909      	ldr	r1, [pc, #36]	; (80033fc <HAL_GPIO_Init+0x304>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	3301      	adds	r3, #1
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f47f ae8e 	bne.w	800310c <HAL_GPIO_Init+0x14>
  }
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	372c      	adds	r7, #44	; 0x2c
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
 800340c:	4613      	mov	r3, r2
 800340e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800341c:	e003      	b.n	8003426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	041a      	lsls	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	041a      	lsls	r2, r3, #16
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43d9      	mvns	r1, r3
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	400b      	ands	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	611a      	str	r2, [r3, #16]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
	...

08003464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e12b      	b.n	80036ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff faba 	bl	8002a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c8:	f001 f842 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80034cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a81      	ldr	r2, [pc, #516]	; (80036d8 <HAL_I2C_Init+0x274>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d807      	bhi.n	80034e8 <HAL_I2C_Init+0x84>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a80      	ldr	r2, [pc, #512]	; (80036dc <HAL_I2C_Init+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	bf94      	ite	ls
 80034e0:	2301      	movls	r3, #1
 80034e2:	2300      	movhi	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e006      	b.n	80034f6 <HAL_I2C_Init+0x92>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a7d      	ldr	r2, [pc, #500]	; (80036e0 <HAL_I2C_Init+0x27c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	bf94      	ite	ls
 80034f0:	2301      	movls	r3, #1
 80034f2:	2300      	movhi	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0e7      	b.n	80036ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a78      	ldr	r2, [pc, #480]	; (80036e4 <HAL_I2C_Init+0x280>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a6a      	ldr	r2, [pc, #424]	; (80036d8 <HAL_I2C_Init+0x274>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d802      	bhi.n	8003538 <HAL_I2C_Init+0xd4>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	e009      	b.n	800354c <HAL_I2C_Init+0xe8>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	4a69      	ldr	r2, [pc, #420]	; (80036e8 <HAL_I2C_Init+0x284>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	3301      	adds	r3, #1
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800355e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	495c      	ldr	r1, [pc, #368]	; (80036d8 <HAL_I2C_Init+0x274>)
 8003568:	428b      	cmp	r3, r1
 800356a:	d819      	bhi.n	80035a0 <HAL_I2C_Init+0x13c>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e59      	subs	r1, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fbb1 f3f3 	udiv	r3, r1, r3
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003580:	400b      	ands	r3, r1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_I2C_Init+0x138>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e59      	subs	r1, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fbb1 f3f3 	udiv	r3, r1, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359a:	e051      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 800359c:	2304      	movs	r3, #4
 800359e:	e04f      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_I2C_Init+0x168>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Init+0x18e>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x196>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_I2C_Init+0x1bc>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e58      	subs	r0, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	fbb0 f3f3 	udiv	r3, r0, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Init+0x1dc>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800366e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6911      	ldr	r1, [r2, #16]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	003d08ff 	.word	0x003d08ff
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003706:	f7ff fbbb 	bl	8002e80 <HAL_GetTick>
 800370a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	f040 80d9 	bne.w	80038cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2319      	movs	r3, #25
 8003720:	2201      	movs	r2, #1
 8003722:	496d      	ldr	r1, [pc, #436]	; (80038d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f971 	bl	8003a0c <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	e0cc      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Mem_Write+0x56>
 800373e:	2302      	movs	r3, #2
 8003740:	e0c5      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d007      	beq.n	8003768 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2221      	movs	r2, #33	; 0x21
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2240      	movs	r2, #64	; 0x40
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a4d      	ldr	r2, [pc, #308]	; (80038dc <HAL_I2C_Mem_Write+0x1f0>)
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037aa:	88f8      	ldrh	r0, [r7, #6]
 80037ac:	893a      	ldrh	r2, [r7, #8]
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4603      	mov	r3, r0
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f890 	bl	80038e0 <I2C_RequestMemoryWrite>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d052      	beq.n	800386c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e081      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa36 	bl	8003c40 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d107      	bne.n	80037f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06b      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11b      	bne.n	800386c <HAL_I2C_Mem_Write+0x180>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1aa      	bne.n	80037ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fa29 	bl	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b04      	cmp	r3, #4
 800388a:	d107      	bne.n	800389c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e016      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	00100002 	.word	0x00100002
 80038dc:	ffff0000 	.word	0xffff0000

080038e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	4608      	mov	r0, r1
 80038ea:	4611      	mov	r1, r2
 80038ec:	461a      	mov	r2, r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	817b      	strh	r3, [r7, #10]
 80038f2:	460b      	mov	r3, r1
 80038f4:	813b      	strh	r3, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	2200      	movs	r2, #0
 8003912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f878 	bl	8003a0c <I2C_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003930:	d103      	bne.n	800393a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e05f      	b.n	80039fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393e:	897b      	ldrh	r3, [r7, #10]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800394c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	492d      	ldr	r1, [pc, #180]	; (8003a08 <I2C_RequestMemoryWrite+0x128>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f8d3 	bl	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e04c      	b.n	80039fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	6a39      	ldr	r1, [r7, #32]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f95e 	bl	8003c40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b04      	cmp	r3, #4
 8003990:	d107      	bne.n	80039a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e02b      	b.n	80039fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ac:	893b      	ldrh	r3, [r7, #8]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e021      	b.n	80039fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039b8:	893b      	ldrh	r3, [r7, #8]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	6a39      	ldr	r1, [r7, #32]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f938 	bl	8003c40 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d107      	bne.n	80039ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e005      	b.n	80039fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f2:	893b      	ldrh	r3, [r7, #8]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	00010002 	.word	0x00010002

08003a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a1c:	e048      	b.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a24:	d044      	beq.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7ff fa2b 	bl	8002e80 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d139      	bne.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d10d      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4013      	ands	r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	e00c      	b.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d116      	bne.n	8003ab0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f043 0220 	orr.w	r2, r3, #32
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e023      	b.n	8003af8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10d      	bne.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	e00c      	b.n	8003af0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	43da      	mvns	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d093      	beq.n	8003a1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b0e:	e071      	b.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d123      	bne.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0204 	orr.w	r2, r3, #4
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e067      	b.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b6e:	d041      	beq.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7ff f986 	bl	8002e80 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d136      	bne.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d10c      	bne.n	8003baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e00b      	b.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf14      	ite	ne
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	2300      	moveq	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e021      	b.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10c      	bne.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	43da      	mvns	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf14      	ite	ne
 8003c10:	2301      	movne	r3, #1
 8003c12:	2300      	moveq	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e00b      	b.n	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f af6d 	bne.w	8003b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c4c:	e034      	b.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f886 	bl	8003d60 <I2C_IsAcknowledgeFailed>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e034      	b.n	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c64:	d028      	beq.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7ff f90b 	bl	8002e80 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11d      	bne.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d016      	beq.n	8003cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d1c3      	bne.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cdc:	e034      	b.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f83e 	bl	8003d60 <I2C_IsAcknowledgeFailed>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e034      	b.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf4:	d028      	beq.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7ff f8c3 	bl	8002e80 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11d      	bne.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d016      	beq.n	8003d48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e007      	b.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d1c3      	bne.n	8003cde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d76:	d11b      	bne.n	8003db0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e272      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8087 	beq.w	8003eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ddc:	4b92      	ldr	r3, [pc, #584]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d00c      	beq.n	8003e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003de8:	4b8f      	ldr	r3, [pc, #572]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d112      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5e>
 8003df4:	4b8c      	ldr	r3, [pc, #560]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d10b      	bne.n	8003e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e02:	4b89      	ldr	r3, [pc, #548]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d06c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x12c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d168      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e24c      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x76>
 8003e24:	4b80      	ldr	r3, [pc, #512]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a7f      	ldr	r2, [pc, #508]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e02e      	b.n	8003e90 <HAL_RCC_OscConfig+0xd4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x98>
 8003e3a:	4b7b      	ldr	r3, [pc, #492]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a7a      	ldr	r2, [pc, #488]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4b78      	ldr	r3, [pc, #480]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a77      	ldr	r2, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	e01d      	b.n	8003e90 <HAL_RCC_OscConfig+0xd4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0xbc>
 8003e5e:	4b72      	ldr	r3, [pc, #456]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a71      	ldr	r2, [pc, #452]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0xd4>
 8003e78:	4b6b      	ldr	r3, [pc, #428]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a6a      	ldr	r2, [pc, #424]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a67      	ldr	r2, [pc, #412]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fff2 	bl	8002e80 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe ffee 	bl	8002e80 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e200      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe4>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe ffde 	bl	8002e80 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fe ffda 	bl	8002e80 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e1ec      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	4b53      	ldr	r3, [pc, #332]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x10c>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d063      	beq.n	8003fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef6:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f02:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x18c>
 8003f0e:	4b46      	ldr	r3, [pc, #280]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_RCC_OscConfig+0x176>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e1c0      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4939      	ldr	r1, [pc, #228]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	e03a      	b.n	8003fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f50:	4b36      	ldr	r3, [pc, #216]	; (800402c <HAL_RCC_OscConfig+0x270>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fe ff93 	bl	8002e80 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5e:	f7fe ff8f 	bl	8002e80 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1a1      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4927      	ldr	r1, [pc, #156]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
 8003f90:	e015      	b.n	8003fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x270>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fe ff72 	bl	8002e80 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fe ff6e 	bl	8002e80 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e180      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d03a      	beq.n	8004040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b17      	ldr	r3, [pc, #92]	; (8004030 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7fe ff52 	bl	8002e80 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe0:	f7fe ff4e 	bl	8002e80 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e160      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ffe:	2001      	movs	r0, #1
 8004000:	f000 faba 	bl	8004578 <RCC_Delay>
 8004004:	e01c      	b.n	8004040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_RCC_OscConfig+0x274>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400c:	f7fe ff38 	bl	8002e80 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004012:	e00f      	b.n	8004034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004014:	f7fe ff34 	bl	8002e80 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d908      	bls.n	8004034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e146      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	42420000 	.word	0x42420000
 8004030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	4b92      	ldr	r3, [pc, #584]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e9      	bne.n	8004014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80a6 	beq.w	800419a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b8b      	ldr	r3, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b88      	ldr	r3, [pc, #544]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4a87      	ldr	r2, [pc, #540]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	61d3      	str	r3, [r2, #28]
 800406a:	4b85      	ldr	r3, [pc, #532]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCC_OscConfig+0x4c8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d118      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004086:	4b7f      	ldr	r3, [pc, #508]	; (8004284 <HAL_RCC_OscConfig+0x4c8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7e      	ldr	r2, [pc, #504]	; (8004284 <HAL_RCC_OscConfig+0x4c8>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004092:	f7fe fef5 	bl	8002e80 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fe fef1 	bl	8002e80 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e103      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	4b75      	ldr	r3, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x4c8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x312>
 80040c0:	4b6f      	ldr	r3, [pc, #444]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a6e      	ldr	r2, [pc, #440]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	6213      	str	r3, [r2, #32]
 80040cc:	e02d      	b.n	800412a <HAL_RCC_OscConfig+0x36e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x334>
 80040d6:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	4a69      	ldr	r2, [pc, #420]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6213      	str	r3, [r2, #32]
 80040e2:	4b67      	ldr	r3, [pc, #412]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4a66      	ldr	r2, [pc, #408]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	6213      	str	r3, [r2, #32]
 80040ee:	e01c      	b.n	800412a <HAL_RCC_OscConfig+0x36e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d10c      	bne.n	8004112 <HAL_RCC_OscConfig+0x356>
 80040f8:	4b61      	ldr	r3, [pc, #388]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4a60      	ldr	r2, [pc, #384]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6213      	str	r3, [r2, #32]
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6213      	str	r3, [r2, #32]
 8004110:	e00b      	b.n	800412a <HAL_RCC_OscConfig+0x36e>
 8004112:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4a5a      	ldr	r2, [pc, #360]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	6213      	str	r3, [r2, #32]
 800411e:	4b58      	ldr	r3, [pc, #352]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4a57      	ldr	r2, [pc, #348]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	f023 0304 	bic.w	r3, r3, #4
 8004128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d015      	beq.n	800415e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe fea5 	bl	8002e80 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fe fea1 	bl	8002e80 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0b1      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ee      	beq.n	800413a <HAL_RCC_OscConfig+0x37e>
 800415c:	e014      	b.n	8004188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415e:	f7fe fe8f 	bl	8002e80 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004164:	e00a      	b.n	800417c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fe fe8b 	bl	8002e80 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f241 3288 	movw	r2, #5000	; 0x1388
 8004174:	4293      	cmp	r3, r2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e09b      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417c:	4b40      	ldr	r3, [pc, #256]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ee      	bne.n	8004166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418e:	4b3c      	ldr	r3, [pc, #240]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4a3b      	ldr	r2, [pc, #236]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8087 	beq.w	80042b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a4:	4b36      	ldr	r3, [pc, #216]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d061      	beq.n	8004274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d146      	bne.n	8004246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <HAL_RCC_OscConfig+0x4cc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fe fe5f 	bl	8002e80 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fe fe5b 	bl	8002e80 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e06d      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d108      	bne.n	8004200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4921      	ldr	r1, [pc, #132]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a19      	ldr	r1, [r3, #32]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	430b      	orrs	r3, r1
 8004212:	491b      	ldr	r1, [pc, #108]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x4cc>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421e:	f7fe fe2f 	bl	8002e80 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004226:	f7fe fe2b 	bl	8002e80 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e03d      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x46a>
 8004244:	e035      	b.n	80042b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_RCC_OscConfig+0x4cc>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424c:	f7fe fe18 	bl	8002e80 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fe fe14 	bl	8002e80 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e026      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x498>
 8004272:	e01e      	b.n	80042b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e019      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
 8004288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_OscConfig+0x500>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	429a      	cmp	r2, r3
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000

080042c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0d0      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d910      	bls.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b67      	ldr	r3, [pc, #412]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0207 	bic.w	r2, r3, #7
 80042ea:	4965      	ldr	r1, [pc, #404]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b8      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800431c:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004334:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a52      	ldr	r2, [pc, #328]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800433e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004340:	4b50      	ldr	r3, [pc, #320]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	494d      	ldr	r1, [pc, #308]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d040      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d115      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07f      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e073      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e06b      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4936      	ldr	r1, [pc, #216]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fe fd66 	bl	8002e80 <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fe fd62 	bl	8002e80 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e053      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d210      	bcs.n	8004410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0207 	bic.w	r2, r3, #7
 80043f6:	4922      	ldr	r1, [pc, #136]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e032      	b.n	8004476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4916      	ldr	r1, [pc, #88]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800444e:	f000 f821 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8004452:	4602      	mov	r2, r0
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	490a      	ldr	r1, [pc, #40]	; (8004488 <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	5ccb      	ldrb	r3, [r1, r3]
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1cc>)
 8004468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1d0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fcc4 	bl	8002dfc <HAL_InitTick>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40022000 	.word	0x40022000
 8004484:	40021000 	.word	0x40021000
 8004488:	0800b41c 	.word	0x0800b41c
 800448c:	20000028 	.word	0x20000028
 8004490:	2000002c 	.word	0x2000002c

08004494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_RCC_GetSysClockFreq+0x94>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d002      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x30>
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x36>
 80044c2:	e027      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_GetSysClockFreq+0x98>)
 80044c6:	613b      	str	r3, [r7, #16]
      break;
 80044c8:	e027      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	0c9b      	lsrs	r3, r3, #18
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	4a17      	ldr	r2, [pc, #92]	; (8004530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044d4:	5cd3      	ldrb	r3, [r2, r3]
 80044d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d010      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_RCC_GetSysClockFreq+0x94>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0c5b      	lsrs	r3, r3, #17
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	4a11      	ldr	r2, [pc, #68]	; (8004534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044ee:	5cd3      	ldrb	r3, [r2, r3]
 80044f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0d      	ldr	r2, [pc, #52]	; (800452c <HAL_RCC_GetSysClockFreq+0x98>)
 80044f6:	fb03 f202 	mul.w	r2, r3, r2
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e004      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004508:	fb02 f303 	mul.w	r3, r2, r3
 800450c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	613b      	str	r3, [r7, #16]
      break;
 8004512:	e002      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetSysClockFreq+0x98>)
 8004516:	613b      	str	r3, [r7, #16]
      break;
 8004518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451a:	693b      	ldr	r3, [r7, #16]
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	007a1200 	.word	0x007a1200
 8004530:	0800b434 	.word	0x0800b434
 8004534:	0800b444 	.word	0x0800b444
 8004538:	003d0900 	.word	0x003d0900

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_RCC_GetHCLKFreq+0x10>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	20000028 	.word	0x20000028

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004554:	f7ff fff2 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	0800b42c 	.word	0x0800b42c

08004578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <RCC_Delay+0x34>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <RCC_Delay+0x38>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0a5b      	lsrs	r3, r3, #9
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004594:	bf00      	nop
  }
  while (Delay --);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1e5a      	subs	r2, r3, #1
 800459a:	60fa      	str	r2, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f9      	bne.n	8004594 <RCC_Delay+0x1c>
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	20000028 	.word	0x20000028
 80045b0:	10624dd3 	.word	0x10624dd3

080045b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e041      	b.n	800464a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe fb04 	bl	8002be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fbe6 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e041      	b.n	80046e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f839 	bl	80046f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f000 fb97 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e093      	b.n	800483e <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fe f9aa 	bl	8002a84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fb34 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	f023 0303 	bic.w	r3, r3, #3
 8004788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	4313      	orrs	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80047a2:	f023 030c 	bic.w	r3, r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	4313      	orrs	r3, r2
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	011a      	lsls	r2, r3, #4
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	4313      	orrs	r3, r2
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4313      	orrs	r3, r2
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d122      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d11b      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f06f 0202 	mvn.w	r2, #2
 8004872:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa80 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 800488e:	e005      	b.n	800489c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fa73 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa82 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d122      	bne.n	80048f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d11b      	bne.n	80048f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0204 	mvn.w	r2, #4
 80048c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa56 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 80048e2:	e005      	b.n	80048f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fa49 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa58 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d122      	bne.n	800494a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d11b      	bne.n	800494a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0208 	mvn.w	r2, #8
 800491a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2204      	movs	r2, #4
 8004920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa2c 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 8004936:	e005      	b.n	8004944 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa1f 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa2e 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d122      	bne.n	800499e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d11b      	bne.n	800499e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0210 	mvn.w	r2, #16
 800496e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2208      	movs	r2, #8
 8004974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa02 	bl	8004d8e <HAL_TIM_IC_CaptureCallback>
 800498a:	e005      	b.n	8004998 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9f5 	bl	8004d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fa04 	bl	8004da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10e      	bne.n	80049ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0201 	mvn.w	r2, #1
 80049c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9d0 	bl	8004d6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d10e      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fcce 	bl	8005392 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d10e      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d107      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f9c8 	bl	8004db2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d10e      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0220 	mvn.w	r2, #32
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fc99 	bl	8005380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e0ae      	b.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	f200 809f 	bhi.w	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004bc5 	.word	0x08004bc5
 8004a94:	08004bc5 	.word	0x08004bc5
 8004a98:	08004bc5 	.word	0x08004bc5
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004bc5 	.word	0x08004bc5
 8004aa4:	08004bc5 	.word	0x08004bc5
 8004aa8:	08004bc5 	.word	0x08004bc5
 8004aac:	08004b43 	.word	0x08004b43
 8004ab0:	08004bc5 	.word	0x08004bc5
 8004ab4:	08004bc5 	.word	0x08004bc5
 8004ab8:	08004bc5 	.word	0x08004bc5
 8004abc:	08004b83 	.word	0x08004b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f9de 	bl	8004e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	619a      	str	r2, [r3, #24]
      break;
 8004afe:	e064      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fa24 	bl	8004f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]
      break;
 8004b40:	e043      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 fa6d 	bl	8005028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0208 	orr.w	r2, r2, #8
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0204 	bic.w	r2, r2, #4
 8004b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69d9      	ldr	r1, [r3, #28]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	61da      	str	r2, [r3, #28]
      break;
 8004b80:	e023      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fab7 	bl	80050fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	021a      	lsls	r2, r3, #8
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	61da      	str	r2, [r3, #28]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e0b4      	b.n	8004d62 <HAL_TIM_ConfigClockSource+0x186>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	d03e      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	f200 8087 	bhi.w	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3e:	f000 8086 	beq.w	8004d4e <HAL_TIM_ConfigClockSource+0x172>
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c46:	d87f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d01a      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xa6>
 8004c4c:	2b70      	cmp	r3, #112	; 0x70
 8004c4e:	d87b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d050      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c54:	2b60      	cmp	r3, #96	; 0x60
 8004c56:	d877      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b50      	cmp	r3, #80	; 0x50
 8004c5a:	d03c      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c5c:	2b50      	cmp	r3, #80	; 0x50
 8004c5e:	d873      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d058      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x13a>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d86f      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d064      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d86b      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d060      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d867      	bhi.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05c      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d05a      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	e062      	b.n	8004d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f000 faf8 	bl	8005286 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	609a      	str	r2, [r3, #8]
      break;
 8004cae:	e04f      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f000 fae1 	bl	8005286 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd2:	609a      	str	r2, [r3, #8]
      break;
 8004cd4:	e03c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 fa58 	bl	8005198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2150      	movs	r1, #80	; 0x50
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 faaf 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e02c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fa76 	bl	80051f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2160      	movs	r1, #96	; 0x60
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa9f 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004d14:	e01c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fa38 	bl	8005198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2140      	movs	r1, #64	; 0x40
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa8f 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004d34:	e00c      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f000 fa86 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004d46:	e003      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4c:	e000      	b.n	8004d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a29      	ldr	r2, [pc, #164]	; (8004e7c <TIM_Base_SetConfig+0xb8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <TIM_Base_SetConfig+0x30>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d007      	beq.n	8004df4 <TIM_Base_SetConfig+0x30>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <TIM_Base_SetConfig+0xbc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0x30>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <TIM_Base_SetConfig+0xc0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d108      	bne.n	8004e06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <TIM_Base_SetConfig+0xb8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x62>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x62>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <TIM_Base_SetConfig+0xbc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x62>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <TIM_Base_SetConfig+0xc0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <TIM_Base_SetConfig+0xb8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800

08004e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 0302 	bic.w	r3, r3, #2
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <TIM_OC1_SetConfig+0xc8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10c      	bne.n	8004efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0308 	bic.w	r3, r3, #8
 8004eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <TIM_OC1_SetConfig+0xc8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00

08004f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 0210 	bic.w	r2, r3, #16
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0320 	bic.w	r3, r3, #32
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <TIM_OC2_SetConfig+0xd0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d10d      	bne.n	8004fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a14      	ldr	r2, [pc, #80]	; (8005024 <TIM_OC2_SetConfig+0xd0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d113      	bne.n	8005000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00

08005028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <TIM_OC3_SetConfig+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10d      	bne.n	80050a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <TIM_OC3_SetConfig+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00

080050fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a0f      	ldr	r2, [pc, #60]	; (8005194 <TIM_OC4_SetConfig+0x98>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr
 8005194:	40012c00 	.word	0x40012c00

08005198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f023 0201 	bic.w	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f023 030a 	bic.w	r3, r3, #10
 80051d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0210 	bic.w	r2, r3, #16
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800521e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	031b      	lsls	r3, r3, #12
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005230:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	621a      	str	r2, [r3, #32]
}
 8005248:	bf00      	nop
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	f043 0307 	orr.w	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005286:	b480      	push	{r7}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	021a      	lsls	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	609a      	str	r2, [r3, #8]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e046      	b.n	800536a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d009      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a10      	ldr	r2, [pc, #64]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10c      	bne.n	8005358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4313      	orrs	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800

08005380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <__errno>:
 80053a4:	4b01      	ldr	r3, [pc, #4]	; (80053ac <__errno+0x8>)
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000034 	.word	0x20000034

080053b0 <__libc_init_array>:
 80053b0:	b570      	push	{r4, r5, r6, lr}
 80053b2:	2600      	movs	r6, #0
 80053b4:	4d0c      	ldr	r5, [pc, #48]	; (80053e8 <__libc_init_array+0x38>)
 80053b6:	4c0d      	ldr	r4, [pc, #52]	; (80053ec <__libc_init_array+0x3c>)
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	42a6      	cmp	r6, r4
 80053be:	d109      	bne.n	80053d4 <__libc_init_array+0x24>
 80053c0:	f001 fcf0 	bl	8006da4 <_init>
 80053c4:	2600      	movs	r6, #0
 80053c6:	4d0a      	ldr	r5, [pc, #40]	; (80053f0 <__libc_init_array+0x40>)
 80053c8:	4c0a      	ldr	r4, [pc, #40]	; (80053f4 <__libc_init_array+0x44>)
 80053ca:	1b64      	subs	r4, r4, r5
 80053cc:	10a4      	asrs	r4, r4, #2
 80053ce:	42a6      	cmp	r6, r4
 80053d0:	d105      	bne.n	80053de <__libc_init_array+0x2e>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d8:	4798      	blx	r3
 80053da:	3601      	adds	r6, #1
 80053dc:	e7ee      	b.n	80053bc <__libc_init_array+0xc>
 80053de:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e2:	4798      	blx	r3
 80053e4:	3601      	adds	r6, #1
 80053e6:	e7f2      	b.n	80053ce <__libc_init_array+0x1e>
 80053e8:	0800b658 	.word	0x0800b658
 80053ec:	0800b658 	.word	0x0800b658
 80053f0:	0800b658 	.word	0x0800b658
 80053f4:	0800b65c 	.word	0x0800b65c

080053f8 <memcpy>:
 80053f8:	440a      	add	r2, r1
 80053fa:	4291      	cmp	r1, r2
 80053fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005400:	d100      	bne.n	8005404 <memcpy+0xc>
 8005402:	4770      	bx	lr
 8005404:	b510      	push	{r4, lr}
 8005406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540a:	4291      	cmp	r1, r2
 800540c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005410:	d1f9      	bne.n	8005406 <memcpy+0xe>
 8005412:	bd10      	pop	{r4, pc}

08005414 <memmove>:
 8005414:	4288      	cmp	r0, r1
 8005416:	b510      	push	{r4, lr}
 8005418:	eb01 0402 	add.w	r4, r1, r2
 800541c:	d902      	bls.n	8005424 <memmove+0x10>
 800541e:	4284      	cmp	r4, r0
 8005420:	4623      	mov	r3, r4
 8005422:	d807      	bhi.n	8005434 <memmove+0x20>
 8005424:	1e43      	subs	r3, r0, #1
 8005426:	42a1      	cmp	r1, r4
 8005428:	d008      	beq.n	800543c <memmove+0x28>
 800542a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800542e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005432:	e7f8      	b.n	8005426 <memmove+0x12>
 8005434:	4601      	mov	r1, r0
 8005436:	4402      	add	r2, r0
 8005438:	428a      	cmp	r2, r1
 800543a:	d100      	bne.n	800543e <memmove+0x2a>
 800543c:	bd10      	pop	{r4, pc}
 800543e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005446:	e7f7      	b.n	8005438 <memmove+0x24>

08005448 <memset>:
 8005448:	4603      	mov	r3, r0
 800544a:	4402      	add	r2, r0
 800544c:	4293      	cmp	r3, r2
 800544e:	d100      	bne.n	8005452 <memset+0xa>
 8005450:	4770      	bx	lr
 8005452:	f803 1b01 	strb.w	r1, [r3], #1
 8005456:	e7f9      	b.n	800544c <memset+0x4>

08005458 <sniprintf>:
 8005458:	b40c      	push	{r2, r3}
 800545a:	b530      	push	{r4, r5, lr}
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <sniprintf+0x64>)
 800545e:	1e0c      	subs	r4, r1, #0
 8005460:	681d      	ldr	r5, [r3, #0]
 8005462:	b09d      	sub	sp, #116	; 0x74
 8005464:	da08      	bge.n	8005478 <sniprintf+0x20>
 8005466:	238b      	movs	r3, #139	; 0x8b
 8005468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800546c:	602b      	str	r3, [r5, #0]
 800546e:	b01d      	add	sp, #116	; 0x74
 8005470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005474:	b002      	add	sp, #8
 8005476:	4770      	bx	lr
 8005478:	f44f 7302 	mov.w	r3, #520	; 0x208
 800547c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005480:	bf0c      	ite	eq
 8005482:	4623      	moveq	r3, r4
 8005484:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	9307      	str	r3, [sp, #28]
 800548c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005490:	9002      	str	r0, [sp, #8]
 8005492:	9006      	str	r0, [sp, #24]
 8005494:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005498:	4628      	mov	r0, r5
 800549a:	ab21      	add	r3, sp, #132	; 0x84
 800549c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800549e:	a902      	add	r1, sp, #8
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f000 f869 	bl	8005578 <_svfiprintf_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	bfbc      	itt	lt
 80054aa:	238b      	movlt	r3, #139	; 0x8b
 80054ac:	602b      	strlt	r3, [r5, #0]
 80054ae:	2c00      	cmp	r4, #0
 80054b0:	d0dd      	beq.n	800546e <sniprintf+0x16>
 80054b2:	2200      	movs	r2, #0
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	e7d9      	b.n	800546e <sniprintf+0x16>
 80054ba:	bf00      	nop
 80054bc:	20000034 	.word	0x20000034

080054c0 <__ssputs_r>:
 80054c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	688e      	ldr	r6, [r1, #8]
 80054c6:	4682      	mov	sl, r0
 80054c8:	429e      	cmp	r6, r3
 80054ca:	460c      	mov	r4, r1
 80054cc:	4690      	mov	r8, r2
 80054ce:	461f      	mov	r7, r3
 80054d0:	d838      	bhi.n	8005544 <__ssputs_r+0x84>
 80054d2:	898a      	ldrh	r2, [r1, #12]
 80054d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054d8:	d032      	beq.n	8005540 <__ssputs_r+0x80>
 80054da:	6825      	ldr	r5, [r4, #0]
 80054dc:	6909      	ldr	r1, [r1, #16]
 80054de:	3301      	adds	r3, #1
 80054e0:	eba5 0901 	sub.w	r9, r5, r1
 80054e4:	6965      	ldr	r5, [r4, #20]
 80054e6:	444b      	add	r3, r9
 80054e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054f0:	106d      	asrs	r5, r5, #1
 80054f2:	429d      	cmp	r5, r3
 80054f4:	bf38      	it	cc
 80054f6:	461d      	movcc	r5, r3
 80054f8:	0553      	lsls	r3, r2, #21
 80054fa:	d531      	bpl.n	8005560 <__ssputs_r+0xa0>
 80054fc:	4629      	mov	r1, r5
 80054fe:	f000 fb47 	bl	8005b90 <_malloc_r>
 8005502:	4606      	mov	r6, r0
 8005504:	b950      	cbnz	r0, 800551c <__ssputs_r+0x5c>
 8005506:	230c      	movs	r3, #12
 8005508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800550c:	f8ca 3000 	str.w	r3, [sl]
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551c:	464a      	mov	r2, r9
 800551e:	6921      	ldr	r1, [r4, #16]
 8005520:	f7ff ff6a 	bl	80053f8 <memcpy>
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800552a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800552e:	81a3      	strh	r3, [r4, #12]
 8005530:	6126      	str	r6, [r4, #16]
 8005532:	444e      	add	r6, r9
 8005534:	6026      	str	r6, [r4, #0]
 8005536:	463e      	mov	r6, r7
 8005538:	6165      	str	r5, [r4, #20]
 800553a:	eba5 0509 	sub.w	r5, r5, r9
 800553e:	60a5      	str	r5, [r4, #8]
 8005540:	42be      	cmp	r6, r7
 8005542:	d900      	bls.n	8005546 <__ssputs_r+0x86>
 8005544:	463e      	mov	r6, r7
 8005546:	4632      	mov	r2, r6
 8005548:	4641      	mov	r1, r8
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	f7ff ff62 	bl	8005414 <memmove>
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	2000      	movs	r0, #0
 8005554:	1b9b      	subs	r3, r3, r6
 8005556:	60a3      	str	r3, [r4, #8]
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	4433      	add	r3, r6
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	e7db      	b.n	8005518 <__ssputs_r+0x58>
 8005560:	462a      	mov	r2, r5
 8005562:	f000 fb89 	bl	8005c78 <_realloc_r>
 8005566:	4606      	mov	r6, r0
 8005568:	2800      	cmp	r0, #0
 800556a:	d1e1      	bne.n	8005530 <__ssputs_r+0x70>
 800556c:	4650      	mov	r0, sl
 800556e:	6921      	ldr	r1, [r4, #16]
 8005570:	f000 faa6 	bl	8005ac0 <_free_r>
 8005574:	e7c7      	b.n	8005506 <__ssputs_r+0x46>
	...

08005578 <_svfiprintf_r>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	4698      	mov	r8, r3
 800557e:	898b      	ldrh	r3, [r1, #12]
 8005580:	4607      	mov	r7, r0
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	460d      	mov	r5, r1
 8005586:	4614      	mov	r4, r2
 8005588:	b09d      	sub	sp, #116	; 0x74
 800558a:	d50e      	bpl.n	80055aa <_svfiprintf_r+0x32>
 800558c:	690b      	ldr	r3, [r1, #16]
 800558e:	b963      	cbnz	r3, 80055aa <_svfiprintf_r+0x32>
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	f000 fafd 	bl	8005b90 <_malloc_r>
 8005596:	6028      	str	r0, [r5, #0]
 8005598:	6128      	str	r0, [r5, #16]
 800559a:	b920      	cbnz	r0, 80055a6 <_svfiprintf_r+0x2e>
 800559c:	230c      	movs	r3, #12
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a4:	e0d1      	b.n	800574a <_svfiprintf_r+0x1d2>
 80055a6:	2340      	movs	r3, #64	; 0x40
 80055a8:	616b      	str	r3, [r5, #20]
 80055aa:	2300      	movs	r3, #0
 80055ac:	9309      	str	r3, [sp, #36]	; 0x24
 80055ae:	2320      	movs	r3, #32
 80055b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055b4:	2330      	movs	r3, #48	; 0x30
 80055b6:	f04f 0901 	mov.w	r9, #1
 80055ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80055be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005764 <_svfiprintf_r+0x1ec>
 80055c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055c6:	4623      	mov	r3, r4
 80055c8:	469a      	mov	sl, r3
 80055ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ce:	b10a      	cbz	r2, 80055d4 <_svfiprintf_r+0x5c>
 80055d0:	2a25      	cmp	r2, #37	; 0x25
 80055d2:	d1f9      	bne.n	80055c8 <_svfiprintf_r+0x50>
 80055d4:	ebba 0b04 	subs.w	fp, sl, r4
 80055d8:	d00b      	beq.n	80055f2 <_svfiprintf_r+0x7a>
 80055da:	465b      	mov	r3, fp
 80055dc:	4622      	mov	r2, r4
 80055de:	4629      	mov	r1, r5
 80055e0:	4638      	mov	r0, r7
 80055e2:	f7ff ff6d 	bl	80054c0 <__ssputs_r>
 80055e6:	3001      	adds	r0, #1
 80055e8:	f000 80aa 	beq.w	8005740 <_svfiprintf_r+0x1c8>
 80055ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ee:	445a      	add	r2, fp
 80055f0:	9209      	str	r2, [sp, #36]	; 0x24
 80055f2:	f89a 3000 	ldrb.w	r3, [sl]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80a2 	beq.w	8005740 <_svfiprintf_r+0x1c8>
 80055fc:	2300      	movs	r3, #0
 80055fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005606:	f10a 0a01 	add.w	sl, sl, #1
 800560a:	9304      	str	r3, [sp, #16]
 800560c:	9307      	str	r3, [sp, #28]
 800560e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005612:	931a      	str	r3, [sp, #104]	; 0x68
 8005614:	4654      	mov	r4, sl
 8005616:	2205      	movs	r2, #5
 8005618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561c:	4851      	ldr	r0, [pc, #324]	; (8005764 <_svfiprintf_r+0x1ec>)
 800561e:	f000 fa41 	bl	8005aa4 <memchr>
 8005622:	9a04      	ldr	r2, [sp, #16]
 8005624:	b9d8      	cbnz	r0, 800565e <_svfiprintf_r+0xe6>
 8005626:	06d0      	lsls	r0, r2, #27
 8005628:	bf44      	itt	mi
 800562a:	2320      	movmi	r3, #32
 800562c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005630:	0711      	lsls	r1, r2, #28
 8005632:	bf44      	itt	mi
 8005634:	232b      	movmi	r3, #43	; 0x2b
 8005636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800563a:	f89a 3000 	ldrb.w	r3, [sl]
 800563e:	2b2a      	cmp	r3, #42	; 0x2a
 8005640:	d015      	beq.n	800566e <_svfiprintf_r+0xf6>
 8005642:	4654      	mov	r4, sl
 8005644:	2000      	movs	r0, #0
 8005646:	f04f 0c0a 	mov.w	ip, #10
 800564a:	9a07      	ldr	r2, [sp, #28]
 800564c:	4621      	mov	r1, r4
 800564e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005652:	3b30      	subs	r3, #48	; 0x30
 8005654:	2b09      	cmp	r3, #9
 8005656:	d94e      	bls.n	80056f6 <_svfiprintf_r+0x17e>
 8005658:	b1b0      	cbz	r0, 8005688 <_svfiprintf_r+0x110>
 800565a:	9207      	str	r2, [sp, #28]
 800565c:	e014      	b.n	8005688 <_svfiprintf_r+0x110>
 800565e:	eba0 0308 	sub.w	r3, r0, r8
 8005662:	fa09 f303 	lsl.w	r3, r9, r3
 8005666:	4313      	orrs	r3, r2
 8005668:	46a2      	mov	sl, r4
 800566a:	9304      	str	r3, [sp, #16]
 800566c:	e7d2      	b.n	8005614 <_svfiprintf_r+0x9c>
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	1d19      	adds	r1, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	9103      	str	r1, [sp, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	bfbb      	ittet	lt
 800567a:	425b      	neglt	r3, r3
 800567c:	f042 0202 	orrlt.w	r2, r2, #2
 8005680:	9307      	strge	r3, [sp, #28]
 8005682:	9307      	strlt	r3, [sp, #28]
 8005684:	bfb8      	it	lt
 8005686:	9204      	strlt	r2, [sp, #16]
 8005688:	7823      	ldrb	r3, [r4, #0]
 800568a:	2b2e      	cmp	r3, #46	; 0x2e
 800568c:	d10c      	bne.n	80056a8 <_svfiprintf_r+0x130>
 800568e:	7863      	ldrb	r3, [r4, #1]
 8005690:	2b2a      	cmp	r3, #42	; 0x2a
 8005692:	d135      	bne.n	8005700 <_svfiprintf_r+0x188>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	3402      	adds	r4, #2
 8005698:	1d1a      	adds	r2, r3, #4
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	9203      	str	r2, [sp, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bfb8      	it	lt
 80056a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056a6:	9305      	str	r3, [sp, #20]
 80056a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005768 <_svfiprintf_r+0x1f0>
 80056ac:	2203      	movs	r2, #3
 80056ae:	4650      	mov	r0, sl
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	f000 f9f7 	bl	8005aa4 <memchr>
 80056b6:	b140      	cbz	r0, 80056ca <_svfiprintf_r+0x152>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	eba0 000a 	sub.w	r0, r0, sl
 80056be:	fa03 f000 	lsl.w	r0, r3, r0
 80056c2:	9b04      	ldr	r3, [sp, #16]
 80056c4:	3401      	adds	r4, #1
 80056c6:	4303      	orrs	r3, r0
 80056c8:	9304      	str	r3, [sp, #16]
 80056ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ce:	2206      	movs	r2, #6
 80056d0:	4826      	ldr	r0, [pc, #152]	; (800576c <_svfiprintf_r+0x1f4>)
 80056d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056d6:	f000 f9e5 	bl	8005aa4 <memchr>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d038      	beq.n	8005750 <_svfiprintf_r+0x1d8>
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <_svfiprintf_r+0x1f8>)
 80056e0:	bb1b      	cbnz	r3, 800572a <_svfiprintf_r+0x1b2>
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	3307      	adds	r3, #7
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	3308      	adds	r3, #8
 80056ec:	9303      	str	r3, [sp, #12]
 80056ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f0:	4433      	add	r3, r6
 80056f2:	9309      	str	r3, [sp, #36]	; 0x24
 80056f4:	e767      	b.n	80055c6 <_svfiprintf_r+0x4e>
 80056f6:	460c      	mov	r4, r1
 80056f8:	2001      	movs	r0, #1
 80056fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80056fe:	e7a5      	b.n	800564c <_svfiprintf_r+0xd4>
 8005700:	2300      	movs	r3, #0
 8005702:	f04f 0c0a 	mov.w	ip, #10
 8005706:	4619      	mov	r1, r3
 8005708:	3401      	adds	r4, #1
 800570a:	9305      	str	r3, [sp, #20]
 800570c:	4620      	mov	r0, r4
 800570e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005712:	3a30      	subs	r2, #48	; 0x30
 8005714:	2a09      	cmp	r2, #9
 8005716:	d903      	bls.n	8005720 <_svfiprintf_r+0x1a8>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0c5      	beq.n	80056a8 <_svfiprintf_r+0x130>
 800571c:	9105      	str	r1, [sp, #20]
 800571e:	e7c3      	b.n	80056a8 <_svfiprintf_r+0x130>
 8005720:	4604      	mov	r4, r0
 8005722:	2301      	movs	r3, #1
 8005724:	fb0c 2101 	mla	r1, ip, r1, r2
 8005728:	e7f0      	b.n	800570c <_svfiprintf_r+0x194>
 800572a:	ab03      	add	r3, sp, #12
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	462a      	mov	r2, r5
 8005730:	4638      	mov	r0, r7
 8005732:	4b10      	ldr	r3, [pc, #64]	; (8005774 <_svfiprintf_r+0x1fc>)
 8005734:	a904      	add	r1, sp, #16
 8005736:	f3af 8000 	nop.w
 800573a:	1c42      	adds	r2, r0, #1
 800573c:	4606      	mov	r6, r0
 800573e:	d1d6      	bne.n	80056ee <_svfiprintf_r+0x176>
 8005740:	89ab      	ldrh	r3, [r5, #12]
 8005742:	065b      	lsls	r3, r3, #25
 8005744:	f53f af2c 	bmi.w	80055a0 <_svfiprintf_r+0x28>
 8005748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800574a:	b01d      	add	sp, #116	; 0x74
 800574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005750:	ab03      	add	r3, sp, #12
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	462a      	mov	r2, r5
 8005756:	4638      	mov	r0, r7
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <_svfiprintf_r+0x1fc>)
 800575a:	a904      	add	r1, sp, #16
 800575c:	f000 f87c 	bl	8005858 <_printf_i>
 8005760:	e7eb      	b.n	800573a <_svfiprintf_r+0x1c2>
 8005762:	bf00      	nop
 8005764:	0800b446 	.word	0x0800b446
 8005768:	0800b44c 	.word	0x0800b44c
 800576c:	0800b450 	.word	0x0800b450
 8005770:	00000000 	.word	0x00000000
 8005774:	080054c1 	.word	0x080054c1

08005778 <_printf_common>:
 8005778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	4616      	mov	r6, r2
 800577e:	4699      	mov	r9, r3
 8005780:	688a      	ldr	r2, [r1, #8]
 8005782:	690b      	ldr	r3, [r1, #16]
 8005784:	4607      	mov	r7, r0
 8005786:	4293      	cmp	r3, r2
 8005788:	bfb8      	it	lt
 800578a:	4613      	movlt	r3, r2
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005792:	460c      	mov	r4, r1
 8005794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005798:	b10a      	cbz	r2, 800579e <_printf_common+0x26>
 800579a:	3301      	adds	r3, #1
 800579c:	6033      	str	r3, [r6, #0]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	0699      	lsls	r1, r3, #26
 80057a2:	bf42      	ittt	mi
 80057a4:	6833      	ldrmi	r3, [r6, #0]
 80057a6:	3302      	addmi	r3, #2
 80057a8:	6033      	strmi	r3, [r6, #0]
 80057aa:	6825      	ldr	r5, [r4, #0]
 80057ac:	f015 0506 	ands.w	r5, r5, #6
 80057b0:	d106      	bne.n	80057c0 <_printf_common+0x48>
 80057b2:	f104 0a19 	add.w	sl, r4, #25
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	6832      	ldr	r2, [r6, #0]
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dc28      	bgt.n	8005812 <_printf_common+0x9a>
 80057c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057c4:	1e13      	subs	r3, r2, #0
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	bf18      	it	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	0692      	lsls	r2, r2, #26
 80057ce:	d42d      	bmi.n	800582c <_printf_common+0xb4>
 80057d0:	4649      	mov	r1, r9
 80057d2:	4638      	mov	r0, r7
 80057d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057d8:	47c0      	blx	r8
 80057da:	3001      	adds	r0, #1
 80057dc:	d020      	beq.n	8005820 <_printf_common+0xa8>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	68e5      	ldr	r5, [r4, #12]
 80057e2:	f003 0306 	and.w	r3, r3, #6
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	bf18      	it	ne
 80057ea:	2500      	movne	r5, #0
 80057ec:	6832      	ldr	r2, [r6, #0]
 80057ee:	f04f 0600 	mov.w	r6, #0
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	bf08      	it	eq
 80057f6:	1aad      	subeq	r5, r5, r2
 80057f8:	6922      	ldr	r2, [r4, #16]
 80057fa:	bf08      	it	eq
 80057fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005800:	4293      	cmp	r3, r2
 8005802:	bfc4      	itt	gt
 8005804:	1a9b      	subgt	r3, r3, r2
 8005806:	18ed      	addgt	r5, r5, r3
 8005808:	341a      	adds	r4, #26
 800580a:	42b5      	cmp	r5, r6
 800580c:	d11a      	bne.n	8005844 <_printf_common+0xcc>
 800580e:	2000      	movs	r0, #0
 8005810:	e008      	b.n	8005824 <_printf_common+0xac>
 8005812:	2301      	movs	r3, #1
 8005814:	4652      	mov	r2, sl
 8005816:	4649      	mov	r1, r9
 8005818:	4638      	mov	r0, r7
 800581a:	47c0      	blx	r8
 800581c:	3001      	adds	r0, #1
 800581e:	d103      	bne.n	8005828 <_printf_common+0xb0>
 8005820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005828:	3501      	adds	r5, #1
 800582a:	e7c4      	b.n	80057b6 <_printf_common+0x3e>
 800582c:	2030      	movs	r0, #48	; 0x30
 800582e:	18e1      	adds	r1, r4, r3
 8005830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800583a:	4422      	add	r2, r4
 800583c:	3302      	adds	r3, #2
 800583e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005842:	e7c5      	b.n	80057d0 <_printf_common+0x58>
 8005844:	2301      	movs	r3, #1
 8005846:	4622      	mov	r2, r4
 8005848:	4649      	mov	r1, r9
 800584a:	4638      	mov	r0, r7
 800584c:	47c0      	blx	r8
 800584e:	3001      	adds	r0, #1
 8005850:	d0e6      	beq.n	8005820 <_printf_common+0xa8>
 8005852:	3601      	adds	r6, #1
 8005854:	e7d9      	b.n	800580a <_printf_common+0x92>
	...

08005858 <_printf_i>:
 8005858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	7e0f      	ldrb	r7, [r1, #24]
 800585e:	4691      	mov	r9, r2
 8005860:	2f78      	cmp	r7, #120	; 0x78
 8005862:	4680      	mov	r8, r0
 8005864:	460c      	mov	r4, r1
 8005866:	469a      	mov	sl, r3
 8005868:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800586a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800586e:	d807      	bhi.n	8005880 <_printf_i+0x28>
 8005870:	2f62      	cmp	r7, #98	; 0x62
 8005872:	d80a      	bhi.n	800588a <_printf_i+0x32>
 8005874:	2f00      	cmp	r7, #0
 8005876:	f000 80d9 	beq.w	8005a2c <_printf_i+0x1d4>
 800587a:	2f58      	cmp	r7, #88	; 0x58
 800587c:	f000 80a4 	beq.w	80059c8 <_printf_i+0x170>
 8005880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005888:	e03a      	b.n	8005900 <_printf_i+0xa8>
 800588a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800588e:	2b15      	cmp	r3, #21
 8005890:	d8f6      	bhi.n	8005880 <_printf_i+0x28>
 8005892:	a101      	add	r1, pc, #4	; (adr r1, 8005898 <_printf_i+0x40>)
 8005894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005898:	080058f1 	.word	0x080058f1
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005881 	.word	0x08005881
 80058a4:	08005881 	.word	0x08005881
 80058a8:	08005881 	.word	0x08005881
 80058ac:	08005881 	.word	0x08005881
 80058b0:	08005905 	.word	0x08005905
 80058b4:	08005881 	.word	0x08005881
 80058b8:	08005881 	.word	0x08005881
 80058bc:	08005881 	.word	0x08005881
 80058c0:	08005881 	.word	0x08005881
 80058c4:	08005a13 	.word	0x08005a13
 80058c8:	08005935 	.word	0x08005935
 80058cc:	080059f5 	.word	0x080059f5
 80058d0:	08005881 	.word	0x08005881
 80058d4:	08005881 	.word	0x08005881
 80058d8:	08005a35 	.word	0x08005a35
 80058dc:	08005881 	.word	0x08005881
 80058e0:	08005935 	.word	0x08005935
 80058e4:	08005881 	.word	0x08005881
 80058e8:	08005881 	.word	0x08005881
 80058ec:	080059fd 	.word	0x080059fd
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	602a      	str	r2, [r5, #0]
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005900:	2301      	movs	r3, #1
 8005902:	e0a4      	b.n	8005a4e <_printf_i+0x1f6>
 8005904:	6820      	ldr	r0, [r4, #0]
 8005906:	6829      	ldr	r1, [r5, #0]
 8005908:	0606      	lsls	r6, r0, #24
 800590a:	f101 0304 	add.w	r3, r1, #4
 800590e:	d50a      	bpl.n	8005926 <_printf_i+0xce>
 8005910:	680e      	ldr	r6, [r1, #0]
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	2e00      	cmp	r6, #0
 8005916:	da03      	bge.n	8005920 <_printf_i+0xc8>
 8005918:	232d      	movs	r3, #45	; 0x2d
 800591a:	4276      	negs	r6, r6
 800591c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005920:	230a      	movs	r3, #10
 8005922:	485e      	ldr	r0, [pc, #376]	; (8005a9c <_printf_i+0x244>)
 8005924:	e019      	b.n	800595a <_printf_i+0x102>
 8005926:	680e      	ldr	r6, [r1, #0]
 8005928:	f010 0f40 	tst.w	r0, #64	; 0x40
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	bf18      	it	ne
 8005930:	b236      	sxthne	r6, r6
 8005932:	e7ef      	b.n	8005914 <_printf_i+0xbc>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	1d19      	adds	r1, r3, #4
 800593a:	6029      	str	r1, [r5, #0]
 800593c:	0601      	lsls	r1, r0, #24
 800593e:	d501      	bpl.n	8005944 <_printf_i+0xec>
 8005940:	681e      	ldr	r6, [r3, #0]
 8005942:	e002      	b.n	800594a <_printf_i+0xf2>
 8005944:	0646      	lsls	r6, r0, #25
 8005946:	d5fb      	bpl.n	8005940 <_printf_i+0xe8>
 8005948:	881e      	ldrh	r6, [r3, #0]
 800594a:	2f6f      	cmp	r7, #111	; 0x6f
 800594c:	bf0c      	ite	eq
 800594e:	2308      	moveq	r3, #8
 8005950:	230a      	movne	r3, #10
 8005952:	4852      	ldr	r0, [pc, #328]	; (8005a9c <_printf_i+0x244>)
 8005954:	2100      	movs	r1, #0
 8005956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800595a:	6865      	ldr	r5, [r4, #4]
 800595c:	2d00      	cmp	r5, #0
 800595e:	bfa8      	it	ge
 8005960:	6821      	ldrge	r1, [r4, #0]
 8005962:	60a5      	str	r5, [r4, #8]
 8005964:	bfa4      	itt	ge
 8005966:	f021 0104 	bicge.w	r1, r1, #4
 800596a:	6021      	strge	r1, [r4, #0]
 800596c:	b90e      	cbnz	r6, 8005972 <_printf_i+0x11a>
 800596e:	2d00      	cmp	r5, #0
 8005970:	d04d      	beq.n	8005a0e <_printf_i+0x1b6>
 8005972:	4615      	mov	r5, r2
 8005974:	fbb6 f1f3 	udiv	r1, r6, r3
 8005978:	fb03 6711 	mls	r7, r3, r1, r6
 800597c:	5dc7      	ldrb	r7, [r0, r7]
 800597e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005982:	4637      	mov	r7, r6
 8005984:	42bb      	cmp	r3, r7
 8005986:	460e      	mov	r6, r1
 8005988:	d9f4      	bls.n	8005974 <_printf_i+0x11c>
 800598a:	2b08      	cmp	r3, #8
 800598c:	d10b      	bne.n	80059a6 <_printf_i+0x14e>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	07de      	lsls	r6, r3, #31
 8005992:	d508      	bpl.n	80059a6 <_printf_i+0x14e>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	6861      	ldr	r1, [r4, #4]
 8005998:	4299      	cmp	r1, r3
 800599a:	bfde      	ittt	le
 800599c:	2330      	movle	r3, #48	; 0x30
 800599e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059a6:	1b52      	subs	r2, r2, r5
 80059a8:	6122      	str	r2, [r4, #16]
 80059aa:	464b      	mov	r3, r9
 80059ac:	4621      	mov	r1, r4
 80059ae:	4640      	mov	r0, r8
 80059b0:	f8cd a000 	str.w	sl, [sp]
 80059b4:	aa03      	add	r2, sp, #12
 80059b6:	f7ff fedf 	bl	8005778 <_printf_common>
 80059ba:	3001      	adds	r0, #1
 80059bc:	d14c      	bne.n	8005a58 <_printf_i+0x200>
 80059be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c2:	b004      	add	sp, #16
 80059c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c8:	4834      	ldr	r0, [pc, #208]	; (8005a9c <_printf_i+0x244>)
 80059ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059ce:	6829      	ldr	r1, [r5, #0]
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80059d6:	6029      	str	r1, [r5, #0]
 80059d8:	061d      	lsls	r5, r3, #24
 80059da:	d514      	bpl.n	8005a06 <_printf_i+0x1ae>
 80059dc:	07df      	lsls	r7, r3, #31
 80059de:	bf44      	itt	mi
 80059e0:	f043 0320 	orrmi.w	r3, r3, #32
 80059e4:	6023      	strmi	r3, [r4, #0]
 80059e6:	b91e      	cbnz	r6, 80059f0 <_printf_i+0x198>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	f023 0320 	bic.w	r3, r3, #32
 80059ee:	6023      	str	r3, [r4, #0]
 80059f0:	2310      	movs	r3, #16
 80059f2:	e7af      	b.n	8005954 <_printf_i+0xfc>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	f043 0320 	orr.w	r3, r3, #32
 80059fa:	6023      	str	r3, [r4, #0]
 80059fc:	2378      	movs	r3, #120	; 0x78
 80059fe:	4828      	ldr	r0, [pc, #160]	; (8005aa0 <_printf_i+0x248>)
 8005a00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a04:	e7e3      	b.n	80059ce <_printf_i+0x176>
 8005a06:	0659      	lsls	r1, r3, #25
 8005a08:	bf48      	it	mi
 8005a0a:	b2b6      	uxthmi	r6, r6
 8005a0c:	e7e6      	b.n	80059dc <_printf_i+0x184>
 8005a0e:	4615      	mov	r5, r2
 8005a10:	e7bb      	b.n	800598a <_printf_i+0x132>
 8005a12:	682b      	ldr	r3, [r5, #0]
 8005a14:	6826      	ldr	r6, [r4, #0]
 8005a16:	1d18      	adds	r0, r3, #4
 8005a18:	6961      	ldr	r1, [r4, #20]
 8005a1a:	6028      	str	r0, [r5, #0]
 8005a1c:	0635      	lsls	r5, r6, #24
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	d501      	bpl.n	8005a26 <_printf_i+0x1ce>
 8005a22:	6019      	str	r1, [r3, #0]
 8005a24:	e002      	b.n	8005a2c <_printf_i+0x1d4>
 8005a26:	0670      	lsls	r0, r6, #25
 8005a28:	d5fb      	bpl.n	8005a22 <_printf_i+0x1ca>
 8005a2a:	8019      	strh	r1, [r3, #0]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4615      	mov	r5, r2
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	e7ba      	b.n	80059aa <_printf_i+0x152>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	2100      	movs	r1, #0
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	602a      	str	r2, [r5, #0]
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 f82f 	bl	8005aa4 <memchr>
 8005a46:	b108      	cbz	r0, 8005a4c <_printf_i+0x1f4>
 8005a48:	1b40      	subs	r0, r0, r5
 8005a4a:	6060      	str	r0, [r4, #4]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	6123      	str	r3, [r4, #16]
 8005a50:	2300      	movs	r3, #0
 8005a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a56:	e7a8      	b.n	80059aa <_printf_i+0x152>
 8005a58:	462a      	mov	r2, r5
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	47d0      	blx	sl
 8005a62:	3001      	adds	r0, #1
 8005a64:	d0ab      	beq.n	80059be <_printf_i+0x166>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	079b      	lsls	r3, r3, #30
 8005a6a:	d413      	bmi.n	8005a94 <_printf_i+0x23c>
 8005a6c:	68e0      	ldr	r0, [r4, #12]
 8005a6e:	9b03      	ldr	r3, [sp, #12]
 8005a70:	4298      	cmp	r0, r3
 8005a72:	bfb8      	it	lt
 8005a74:	4618      	movlt	r0, r3
 8005a76:	e7a4      	b.n	80059c2 <_printf_i+0x16a>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4640      	mov	r0, r8
 8005a80:	47d0      	blx	sl
 8005a82:	3001      	adds	r0, #1
 8005a84:	d09b      	beq.n	80059be <_printf_i+0x166>
 8005a86:	3501      	adds	r5, #1
 8005a88:	68e3      	ldr	r3, [r4, #12]
 8005a8a:	9903      	ldr	r1, [sp, #12]
 8005a8c:	1a5b      	subs	r3, r3, r1
 8005a8e:	42ab      	cmp	r3, r5
 8005a90:	dcf2      	bgt.n	8005a78 <_printf_i+0x220>
 8005a92:	e7eb      	b.n	8005a6c <_printf_i+0x214>
 8005a94:	2500      	movs	r5, #0
 8005a96:	f104 0619 	add.w	r6, r4, #25
 8005a9a:	e7f5      	b.n	8005a88 <_printf_i+0x230>
 8005a9c:	0800b457 	.word	0x0800b457
 8005aa0:	0800b468 	.word	0x0800b468

08005aa4 <memchr>:
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	b510      	push	{r4, lr}
 8005aa8:	b2c9      	uxtb	r1, r1
 8005aaa:	4402      	add	r2, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	d101      	bne.n	8005ab6 <memchr+0x12>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e003      	b.n	8005abe <memchr+0x1a>
 8005ab6:	7804      	ldrb	r4, [r0, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	428c      	cmp	r4, r1
 8005abc:	d1f6      	bne.n	8005aac <memchr+0x8>
 8005abe:	bd10      	pop	{r4, pc}

08005ac0 <_free_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	d040      	beq.n	8005b4a <_free_r+0x8a>
 8005ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005acc:	1f0c      	subs	r4, r1, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfb8      	it	lt
 8005ad2:	18e4      	addlt	r4, r4, r3
 8005ad4:	f000 f910 	bl	8005cf8 <__malloc_lock>
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <_free_r+0x8c>)
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	b933      	cbnz	r3, 8005aec <_free_r+0x2c>
 8005ade:	6063      	str	r3, [r4, #4]
 8005ae0:	6014      	str	r4, [r2, #0]
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae8:	f000 b90c 	b.w	8005d04 <__malloc_unlock>
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d908      	bls.n	8005b02 <_free_r+0x42>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	1821      	adds	r1, r4, r0
 8005af4:	428b      	cmp	r3, r1
 8005af6:	bf01      	itttt	eq
 8005af8:	6819      	ldreq	r1, [r3, #0]
 8005afa:	685b      	ldreq	r3, [r3, #4]
 8005afc:	1809      	addeq	r1, r1, r0
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	e7ed      	b.n	8005ade <_free_r+0x1e>
 8005b02:	461a      	mov	r2, r3
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	b10b      	cbz	r3, 8005b0c <_free_r+0x4c>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d9fa      	bls.n	8005b02 <_free_r+0x42>
 8005b0c:	6811      	ldr	r1, [r2, #0]
 8005b0e:	1850      	adds	r0, r2, r1
 8005b10:	42a0      	cmp	r0, r4
 8005b12:	d10b      	bne.n	8005b2c <_free_r+0x6c>
 8005b14:	6820      	ldr	r0, [r4, #0]
 8005b16:	4401      	add	r1, r0
 8005b18:	1850      	adds	r0, r2, r1
 8005b1a:	4283      	cmp	r3, r0
 8005b1c:	6011      	str	r1, [r2, #0]
 8005b1e:	d1e0      	bne.n	8005ae2 <_free_r+0x22>
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4401      	add	r1, r0
 8005b26:	6011      	str	r1, [r2, #0]
 8005b28:	6053      	str	r3, [r2, #4]
 8005b2a:	e7da      	b.n	8005ae2 <_free_r+0x22>
 8005b2c:	d902      	bls.n	8005b34 <_free_r+0x74>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	602b      	str	r3, [r5, #0]
 8005b32:	e7d6      	b.n	8005ae2 <_free_r+0x22>
 8005b34:	6820      	ldr	r0, [r4, #0]
 8005b36:	1821      	adds	r1, r4, r0
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	bf01      	itttt	eq
 8005b3c:	6819      	ldreq	r1, [r3, #0]
 8005b3e:	685b      	ldreq	r3, [r3, #4]
 8005b40:	1809      	addeq	r1, r1, r0
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	6054      	str	r4, [r2, #4]
 8005b48:	e7cb      	b.n	8005ae2 <_free_r+0x22>
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	20000638 	.word	0x20000638

08005b50 <sbrk_aligned>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0e      	ldr	r6, [pc, #56]	; (8005b8c <sbrk_aligned+0x3c>)
 8005b54:	460c      	mov	r4, r1
 8005b56:	6831      	ldr	r1, [r6, #0]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b911      	cbnz	r1, 8005b62 <sbrk_aligned+0x12>
 8005b5c:	f000 f8bc 	bl	8005cd8 <_sbrk_r>
 8005b60:	6030      	str	r0, [r6, #0]
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 f8b7 	bl	8005cd8 <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d00a      	beq.n	8005b84 <sbrk_aligned+0x34>
 8005b6e:	1cc4      	adds	r4, r0, #3
 8005b70:	f024 0403 	bic.w	r4, r4, #3
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d007      	beq.n	8005b88 <sbrk_aligned+0x38>
 8005b78:	1a21      	subs	r1, r4, r0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f000 f8ac 	bl	8005cd8 <_sbrk_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d101      	bne.n	8005b88 <sbrk_aligned+0x38>
 8005b84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	2000063c 	.word	0x2000063c

08005b90 <_malloc_r>:
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	1ccd      	adds	r5, r1, #3
 8005b96:	f025 0503 	bic.w	r5, r5, #3
 8005b9a:	3508      	adds	r5, #8
 8005b9c:	2d0c      	cmp	r5, #12
 8005b9e:	bf38      	it	cc
 8005ba0:	250c      	movcc	r5, #12
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	db01      	blt.n	8005bac <_malloc_r+0x1c>
 8005ba8:	42a9      	cmp	r1, r5
 8005baa:	d905      	bls.n	8005bb8 <_malloc_r+0x28>
 8005bac:	230c      	movs	r3, #12
 8005bae:	2600      	movs	r6, #0
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	4e2e      	ldr	r6, [pc, #184]	; (8005c74 <_malloc_r+0xe4>)
 8005bba:	f000 f89d 	bl	8005cf8 <__malloc_lock>
 8005bbe:	6833      	ldr	r3, [r6, #0]
 8005bc0:	461c      	mov	r4, r3
 8005bc2:	bb34      	cbnz	r4, 8005c12 <_malloc_r+0x82>
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ffc2 	bl	8005b50 <sbrk_aligned>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	4604      	mov	r4, r0
 8005bd0:	d14d      	bne.n	8005c6e <_malloc_r+0xde>
 8005bd2:	6834      	ldr	r4, [r6, #0]
 8005bd4:	4626      	mov	r6, r4
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d140      	bne.n	8005c5c <_malloc_r+0xcc>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4638      	mov	r0, r7
 8005be0:	eb04 0803 	add.w	r8, r4, r3
 8005be4:	f000 f878 	bl	8005cd8 <_sbrk_r>
 8005be8:	4580      	cmp	r8, r0
 8005bea:	d13a      	bne.n	8005c62 <_malloc_r+0xd2>
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	3503      	adds	r5, #3
 8005bf0:	1a6d      	subs	r5, r5, r1
 8005bf2:	f025 0503 	bic.w	r5, r5, #3
 8005bf6:	3508      	adds	r5, #8
 8005bf8:	2d0c      	cmp	r5, #12
 8005bfa:	bf38      	it	cc
 8005bfc:	250c      	movcc	r5, #12
 8005bfe:	4638      	mov	r0, r7
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7ff ffa5 	bl	8005b50 <sbrk_aligned>
 8005c06:	3001      	adds	r0, #1
 8005c08:	d02b      	beq.n	8005c62 <_malloc_r+0xd2>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	442b      	add	r3, r5
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	e00e      	b.n	8005c30 <_malloc_r+0xa0>
 8005c12:	6822      	ldr	r2, [r4, #0]
 8005c14:	1b52      	subs	r2, r2, r5
 8005c16:	d41e      	bmi.n	8005c56 <_malloc_r+0xc6>
 8005c18:	2a0b      	cmp	r2, #11
 8005c1a:	d916      	bls.n	8005c4a <_malloc_r+0xba>
 8005c1c:	1961      	adds	r1, r4, r5
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	6025      	str	r5, [r4, #0]
 8005c22:	bf18      	it	ne
 8005c24:	6059      	strne	r1, [r3, #4]
 8005c26:	6863      	ldr	r3, [r4, #4]
 8005c28:	bf08      	it	eq
 8005c2a:	6031      	streq	r1, [r6, #0]
 8005c2c:	5162      	str	r2, [r4, r5]
 8005c2e:	604b      	str	r3, [r1, #4]
 8005c30:	4638      	mov	r0, r7
 8005c32:	f104 060b 	add.w	r6, r4, #11
 8005c36:	f000 f865 	bl	8005d04 <__malloc_unlock>
 8005c3a:	f026 0607 	bic.w	r6, r6, #7
 8005c3e:	1d23      	adds	r3, r4, #4
 8005c40:	1af2      	subs	r2, r6, r3
 8005c42:	d0b6      	beq.n	8005bb2 <_malloc_r+0x22>
 8005c44:	1b9b      	subs	r3, r3, r6
 8005c46:	50a3      	str	r3, [r4, r2]
 8005c48:	e7b3      	b.n	8005bb2 <_malloc_r+0x22>
 8005c4a:	6862      	ldr	r2, [r4, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	bf0c      	ite	eq
 8005c50:	6032      	streq	r2, [r6, #0]
 8005c52:	605a      	strne	r2, [r3, #4]
 8005c54:	e7ec      	b.n	8005c30 <_malloc_r+0xa0>
 8005c56:	4623      	mov	r3, r4
 8005c58:	6864      	ldr	r4, [r4, #4]
 8005c5a:	e7b2      	b.n	8005bc2 <_malloc_r+0x32>
 8005c5c:	4634      	mov	r4, r6
 8005c5e:	6876      	ldr	r6, [r6, #4]
 8005c60:	e7b9      	b.n	8005bd6 <_malloc_r+0x46>
 8005c62:	230c      	movs	r3, #12
 8005c64:	4638      	mov	r0, r7
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	f000 f84c 	bl	8005d04 <__malloc_unlock>
 8005c6c:	e7a1      	b.n	8005bb2 <_malloc_r+0x22>
 8005c6e:	6025      	str	r5, [r4, #0]
 8005c70:	e7de      	b.n	8005c30 <_malloc_r+0xa0>
 8005c72:	bf00      	nop
 8005c74:	20000638 	.word	0x20000638

08005c78 <_realloc_r>:
 8005c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4614      	mov	r4, r2
 8005c80:	460e      	mov	r6, r1
 8005c82:	b921      	cbnz	r1, 8005c8e <_realloc_r+0x16>
 8005c84:	4611      	mov	r1, r2
 8005c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8a:	f7ff bf81 	b.w	8005b90 <_malloc_r>
 8005c8e:	b92a      	cbnz	r2, 8005c9c <_realloc_r+0x24>
 8005c90:	f7ff ff16 	bl	8005ac0 <_free_r>
 8005c94:	4625      	mov	r5, r4
 8005c96:	4628      	mov	r0, r5
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	f000 f838 	bl	8005d10 <_malloc_usable_size_r>
 8005ca0:	4284      	cmp	r4, r0
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	d802      	bhi.n	8005cac <_realloc_r+0x34>
 8005ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005caa:	d812      	bhi.n	8005cd2 <_realloc_r+0x5a>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f7ff ff6e 	bl	8005b90 <_malloc_r>
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d0ed      	beq.n	8005c96 <_realloc_r+0x1e>
 8005cba:	42bc      	cmp	r4, r7
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	bf28      	it	cs
 8005cc2:	463a      	movcs	r2, r7
 8005cc4:	f7ff fb98 	bl	80053f8 <memcpy>
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7ff fef8 	bl	8005ac0 <_free_r>
 8005cd0:	e7e1      	b.n	8005c96 <_realloc_r+0x1e>
 8005cd2:	4635      	mov	r5, r6
 8005cd4:	e7df      	b.n	8005c96 <_realloc_r+0x1e>
	...

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	2300      	movs	r3, #0
 8005cdc:	4d05      	ldr	r5, [pc, #20]	; (8005cf4 <_sbrk_r+0x1c>)
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fd f812 	bl	8002d0c <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000640 	.word	0x20000640

08005cf8 <__malloc_lock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__malloc_lock+0x8>)
 8005cfa:	f000 b811 	b.w	8005d20 <__retarget_lock_acquire_recursive>
 8005cfe:	bf00      	nop
 8005d00:	20000644 	.word	0x20000644

08005d04 <__malloc_unlock>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__malloc_unlock+0x8>)
 8005d06:	f000 b80c 	b.w	8005d22 <__retarget_lock_release_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	20000644 	.word	0x20000644

08005d10 <_malloc_usable_size_r>:
 8005d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d14:	1f18      	subs	r0, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfbc      	itt	lt
 8005d1a:	580b      	ldrlt	r3, [r1, r0]
 8005d1c:	18c0      	addlt	r0, r0, r3
 8005d1e:	4770      	bx	lr

08005d20 <__retarget_lock_acquire_recursive>:
 8005d20:	4770      	bx	lr

08005d22 <__retarget_lock_release_recursive>:
 8005d22:	4770      	bx	lr

08005d24 <cos>:
 8005d24:	b530      	push	{r4, r5, lr}
 8005d26:	4a20      	ldr	r2, [pc, #128]	; (8005da8 <cos+0x84>)
 8005d28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	b087      	sub	sp, #28
 8005d30:	dc06      	bgt.n	8005d40 <cos+0x1c>
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	b007      	add	sp, #28
 8005d38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d3c:	f000 ba78 	b.w	8006230 <__kernel_cos>
 8005d40:	4a1a      	ldr	r2, [pc, #104]	; (8005dac <cos+0x88>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	dd05      	ble.n	8005d52 <cos+0x2e>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	f7fa fa05 	bl	8000158 <__aeabi_dsub>
 8005d4e:	b007      	add	sp, #28
 8005d50:	bd30      	pop	{r4, r5, pc}
 8005d52:	aa02      	add	r2, sp, #8
 8005d54:	f000 f874 	bl	8005e40 <__ieee754_rem_pio2>
 8005d58:	f000 0003 	and.w	r0, r0, #3
 8005d5c:	2801      	cmp	r0, #1
 8005d5e:	d009      	beq.n	8005d74 <cos+0x50>
 8005d60:	2802      	cmp	r0, #2
 8005d62:	d011      	beq.n	8005d88 <cos+0x64>
 8005d64:	b9b8      	cbnz	r0, 8005d96 <cos+0x72>
 8005d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d6e:	f000 fa5f 	bl	8006230 <__kernel_cos>
 8005d72:	e7ec      	b.n	8005d4e <cos+0x2a>
 8005d74:	9000      	str	r0, [sp, #0]
 8005d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d7e:	f000 fe57 	bl	8006a30 <__kernel_sin>
 8005d82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005d86:	e7e2      	b.n	8005d4e <cos+0x2a>
 8005d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d90:	f000 fa4e 	bl	8006230 <__kernel_cos>
 8005d94:	e7f5      	b.n	8005d82 <cos+0x5e>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005da2:	f000 fe45 	bl	8006a30 <__kernel_sin>
 8005da6:	e7d2      	b.n	8005d4e <cos+0x2a>
 8005da8:	3fe921fb 	.word	0x3fe921fb
 8005dac:	7fefffff 	.word	0x7fefffff

08005db0 <sin>:
 8005db0:	b530      	push	{r4, r5, lr}
 8005db2:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <sin+0x84>)
 8005db4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005db8:	4293      	cmp	r3, r2
 8005dba:	b087      	sub	sp, #28
 8005dbc:	dc06      	bgt.n	8005dcc <sin+0x1c>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f000 fe33 	bl	8006a30 <__kernel_sin>
 8005dca:	e006      	b.n	8005dda <sin+0x2a>
 8005dcc:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <sin+0x88>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	dd05      	ble.n	8005dde <sin+0x2e>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	f7fa f9bf 	bl	8000158 <__aeabi_dsub>
 8005dda:	b007      	add	sp, #28
 8005ddc:	bd30      	pop	{r4, r5, pc}
 8005dde:	aa02      	add	r2, sp, #8
 8005de0:	f000 f82e 	bl	8005e40 <__ieee754_rem_pio2>
 8005de4:	f000 0003 	and.w	r0, r0, #3
 8005de8:	2801      	cmp	r0, #1
 8005dea:	d009      	beq.n	8005e00 <sin+0x50>
 8005dec:	2802      	cmp	r0, #2
 8005dee:	d00e      	beq.n	8005e0e <sin+0x5e>
 8005df0:	b9c0      	cbnz	r0, 8005e24 <sin+0x74>
 8005df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df6:	2301      	movs	r3, #1
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dfe:	e7e2      	b.n	8005dc6 <sin+0x16>
 8005e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e08:	f000 fa12 	bl	8006230 <__kernel_cos>
 8005e0c:	e7e5      	b.n	8005dda <sin+0x2a>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1a:	f000 fe09 	bl	8006a30 <__kernel_sin>
 8005e1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005e22:	e7da      	b.n	8005dda <sin+0x2a>
 8005e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2c:	f000 fa00 	bl	8006230 <__kernel_cos>
 8005e30:	e7f5      	b.n	8005e1e <sin+0x6e>
 8005e32:	bf00      	nop
 8005e34:	3fe921fb 	.word	0x3fe921fb
 8005e38:	7fefffff 	.word	0x7fefffff
 8005e3c:	00000000 	.word	0x00000000

08005e40 <__ieee754_rem_pio2>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4614      	mov	r4, r2
 8005e46:	4ac4      	ldr	r2, [pc, #784]	; (8006158 <__ieee754_rem_pio2+0x318>)
 8005e48:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005e4c:	b08d      	sub	sp, #52	; 0x34
 8005e4e:	4592      	cmp	sl, r2
 8005e50:	9104      	str	r1, [sp, #16]
 8005e52:	dc07      	bgt.n	8005e64 <__ieee754_rem_pio2+0x24>
 8005e54:	2200      	movs	r2, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	e9c4 0100 	strd	r0, r1, [r4]
 8005e5c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005e60:	2500      	movs	r5, #0
 8005e62:	e024      	b.n	8005eae <__ieee754_rem_pio2+0x6e>
 8005e64:	4abd      	ldr	r2, [pc, #756]	; (800615c <__ieee754_rem_pio2+0x31c>)
 8005e66:	4592      	cmp	sl, r2
 8005e68:	dc72      	bgt.n	8005f50 <__ieee754_rem_pio2+0x110>
 8005e6a:	9b04      	ldr	r3, [sp, #16]
 8005e6c:	4dbc      	ldr	r5, [pc, #752]	; (8006160 <__ieee754_rem_pio2+0x320>)
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	a3ab      	add	r3, pc, #684	; (adr r3, 8006120 <__ieee754_rem_pio2+0x2e0>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	dd36      	ble.n	8005ee6 <__ieee754_rem_pio2+0xa6>
 8005e78:	f7fa f96e 	bl	8000158 <__aeabi_dsub>
 8005e7c:	45aa      	cmp	sl, r5
 8005e7e:	4606      	mov	r6, r0
 8005e80:	460f      	mov	r7, r1
 8005e82:	d018      	beq.n	8005eb6 <__ieee754_rem_pio2+0x76>
 8005e84:	a3a8      	add	r3, pc, #672	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2e8>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa f965 	bl	8000158 <__aeabi_dsub>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4630      	mov	r0, r6
 8005e94:	e9c4 2300 	strd	r2, r3, [r4]
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa f95d 	bl	8000158 <__aeabi_dsub>
 8005e9e:	a3a2      	add	r3, pc, #648	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2e8>)
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f7fa f958 	bl	8000158 <__aeabi_dsub>
 8005ea8:	2501      	movs	r5, #1
 8005eaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005eae:	4628      	mov	r0, r5
 8005eb0:	b00d      	add	sp, #52	; 0x34
 8005eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb6:	a39e      	add	r3, pc, #632	; (adr r3, 8006130 <__ieee754_rem_pio2+0x2f0>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa f94c 	bl	8000158 <__aeabi_dsub>
 8005ec0:	a39d      	add	r3, pc, #628	; (adr r3, 8006138 <__ieee754_rem_pio2+0x2f8>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460f      	mov	r7, r1
 8005eca:	f7fa f945 	bl	8000158 <__aeabi_dsub>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	e9c4 2300 	strd	r2, r3, [r4]
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7fa f93d 	bl	8000158 <__aeabi_dsub>
 8005ede:	a396      	add	r3, pc, #600	; (adr r3, 8006138 <__ieee754_rem_pio2+0x2f8>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	e7de      	b.n	8005ea4 <__ieee754_rem_pio2+0x64>
 8005ee6:	f7fa f939 	bl	800015c <__adddf3>
 8005eea:	45aa      	cmp	sl, r5
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	d016      	beq.n	8005f20 <__ieee754_rem_pio2+0xe0>
 8005ef2:	a38d      	add	r3, pc, #564	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2e8>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa f930 	bl	800015c <__adddf3>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4630      	mov	r0, r6
 8005f02:	e9c4 2300 	strd	r2, r3, [r4]
 8005f06:	4639      	mov	r1, r7
 8005f08:	f7fa f926 	bl	8000158 <__aeabi_dsub>
 8005f0c:	a386      	add	r3, pc, #536	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2e8>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f923 	bl	800015c <__adddf3>
 8005f16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f1e:	e7c6      	b.n	8005eae <__ieee754_rem_pio2+0x6e>
 8005f20:	a383      	add	r3, pc, #524	; (adr r3, 8006130 <__ieee754_rem_pio2+0x2f0>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa f919 	bl	800015c <__adddf3>
 8005f2a:	a383      	add	r3, pc, #524	; (adr r3, 8006138 <__ieee754_rem_pio2+0x2f8>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	f7fa f912 	bl	800015c <__adddf3>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8005f42:	4639      	mov	r1, r7
 8005f44:	f7fa f908 	bl	8000158 <__aeabi_dsub>
 8005f48:	a37b      	add	r3, pc, #492	; (adr r3, 8006138 <__ieee754_rem_pio2+0x2f8>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	e7e0      	b.n	8005f12 <__ieee754_rem_pio2+0xd2>
 8005f50:	4a84      	ldr	r2, [pc, #528]	; (8006164 <__ieee754_rem_pio2+0x324>)
 8005f52:	4592      	cmp	sl, r2
 8005f54:	f300 80d5 	bgt.w	8006102 <__ieee754_rem_pio2+0x2c2>
 8005f58:	f000 fe20 	bl	8006b9c <fabs>
 8005f5c:	a378      	add	r3, pc, #480	; (adr r3, 8006140 <__ieee754_rem_pio2+0x300>)
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	4606      	mov	r6, r0
 8005f64:	460f      	mov	r7, r1
 8005f66:	f7fa faaf 	bl	80004c8 <__aeabi_dmul>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4b7e      	ldr	r3, [pc, #504]	; (8006168 <__ieee754_rem_pio2+0x328>)
 8005f6e:	f7fa f8f5 	bl	800015c <__adddf3>
 8005f72:	f7fa fd43 	bl	80009fc <__aeabi_d2iz>
 8005f76:	4605      	mov	r5, r0
 8005f78:	f7fa fa3c 	bl	80003f4 <__aeabi_i2d>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f84:	a366      	add	r3, pc, #408	; (adr r3, 8006120 <__ieee754_rem_pio2+0x2e0>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa fa9d 	bl	80004c8 <__aeabi_dmul>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4630      	mov	r0, r6
 8005f94:	4639      	mov	r1, r7
 8005f96:	f7fa f8df 	bl	8000158 <__aeabi_dsub>
 8005f9a:	a363      	add	r3, pc, #396	; (adr r3, 8006128 <__ieee754_rem_pio2+0x2e8>)
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	4680      	mov	r8, r0
 8005fa2:	4689      	mov	r9, r1
 8005fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa8:	f7fa fa8e 	bl	80004c8 <__aeabi_dmul>
 8005fac:	2d1f      	cmp	r5, #31
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	dc0e      	bgt.n	8005fd2 <__ieee754_rem_pio2+0x192>
 8005fb4:	4b6d      	ldr	r3, [pc, #436]	; (800616c <__ieee754_rem_pio2+0x32c>)
 8005fb6:	1e6a      	subs	r2, r5, #1
 8005fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbc:	4553      	cmp	r3, sl
 8005fbe:	d008      	beq.n	8005fd2 <__ieee754_rem_pio2+0x192>
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	f7fa f8c6 	bl	8000158 <__aeabi_dsub>
 8005fcc:	e9c4 0100 	strd	r0, r1, [r4]
 8005fd0:	e013      	b.n	8005ffa <__ieee754_rem_pio2+0x1ba>
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	4649      	mov	r1, r9
 8005fda:	f7fa f8bd 	bl	8000158 <__aeabi_dsub>
 8005fde:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fe8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005fec:	f1ba 0f10 	cmp.w	sl, #16
 8005ff0:	dc1f      	bgt.n	8006032 <__ieee754_rem_pio2+0x1f2>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	e9c4 2300 	strd	r2, r3, [r4]
 8005ffa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005ffe:	4640      	mov	r0, r8
 8006000:	4653      	mov	r3, sl
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa f8a8 	bl	8000158 <__aeabi_dsub>
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	f7fa f8a4 	bl	8000158 <__aeabi_dsub>
 8006010:	460b      	mov	r3, r1
 8006012:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006016:	9904      	ldr	r1, [sp, #16]
 8006018:	4602      	mov	r2, r0
 800601a:	2900      	cmp	r1, #0
 800601c:	f6bf af47 	bge.w	8005eae <__ieee754_rem_pio2+0x6e>
 8006020:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8006024:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800602c:	60e3      	str	r3, [r4, #12]
 800602e:	426d      	negs	r5, r5
 8006030:	e73d      	b.n	8005eae <__ieee754_rem_pio2+0x6e>
 8006032:	a33f      	add	r3, pc, #252	; (adr r3, 8006130 <__ieee754_rem_pio2+0x2f0>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603c:	f7fa fa44 	bl	80004c8 <__aeabi_dmul>
 8006040:	4606      	mov	r6, r0
 8006042:	460f      	mov	r7, r1
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	f7fa f884 	bl	8000158 <__aeabi_dsub>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4682      	mov	sl, r0
 8006056:	468b      	mov	fp, r1
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa f87c 	bl	8000158 <__aeabi_dsub>
 8006060:	4632      	mov	r2, r6
 8006062:	463b      	mov	r3, r7
 8006064:	f7fa f878 	bl	8000158 <__aeabi_dsub>
 8006068:	a333      	add	r3, pc, #204	; (adr r3, 8006138 <__ieee754_rem_pio2+0x2f8>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006076:	f7fa fa27 	bl	80004c8 <__aeabi_dmul>
 800607a:	4632      	mov	r2, r6
 800607c:	463b      	mov	r3, r7
 800607e:	f7fa f86b 	bl	8000158 <__aeabi_dsub>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	4650      	mov	r0, sl
 800608c:	4659      	mov	r1, fp
 800608e:	f7fa f863 	bl	8000158 <__aeabi_dsub>
 8006092:	9a05      	ldr	r2, [sp, #20]
 8006094:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b31      	cmp	r3, #49	; 0x31
 800609c:	dc06      	bgt.n	80060ac <__ieee754_rem_pio2+0x26c>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	46d0      	mov	r8, sl
 80060a4:	46d9      	mov	r9, fp
 80060a6:	e9c4 2300 	strd	r2, r3, [r4]
 80060aa:	e7a6      	b.n	8005ffa <__ieee754_rem_pio2+0x1ba>
 80060ac:	a326      	add	r3, pc, #152	; (adr r3, 8006148 <__ieee754_rem_pio2+0x308>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060b6:	f7fa fa07 	bl	80004c8 <__aeabi_dmul>
 80060ba:	4606      	mov	r6, r0
 80060bc:	460f      	mov	r7, r1
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4650      	mov	r0, sl
 80060c4:	4659      	mov	r1, fp
 80060c6:	f7fa f847 	bl	8000158 <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4680      	mov	r8, r0
 80060d0:	4689      	mov	r9, r1
 80060d2:	4650      	mov	r0, sl
 80060d4:	4659      	mov	r1, fp
 80060d6:	f7fa f83f 	bl	8000158 <__aeabi_dsub>
 80060da:	4632      	mov	r2, r6
 80060dc:	463b      	mov	r3, r7
 80060de:	f7fa f83b 	bl	8000158 <__aeabi_dsub>
 80060e2:	a31b      	add	r3, pc, #108	; (adr r3, 8006150 <__ieee754_rem_pio2+0x310>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	4606      	mov	r6, r0
 80060ea:	460f      	mov	r7, r1
 80060ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f0:	f7fa f9ea 	bl	80004c8 <__aeabi_dmul>
 80060f4:	4632      	mov	r2, r6
 80060f6:	463b      	mov	r3, r7
 80060f8:	f7fa f82e 	bl	8000158 <__aeabi_dsub>
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	e75e      	b.n	8005fc0 <__ieee754_rem_pio2+0x180>
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <__ieee754_rem_pio2+0x330>)
 8006104:	4592      	cmp	sl, r2
 8006106:	dd35      	ble.n	8006174 <__ieee754_rem_pio2+0x334>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	f7fa f824 	bl	8000158 <__aeabi_dsub>
 8006110:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006114:	e9c4 0100 	strd	r0, r1, [r4]
 8006118:	e6a2      	b.n	8005e60 <__ieee754_rem_pio2+0x20>
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w
 8006120:	54400000 	.word	0x54400000
 8006124:	3ff921fb 	.word	0x3ff921fb
 8006128:	1a626331 	.word	0x1a626331
 800612c:	3dd0b461 	.word	0x3dd0b461
 8006130:	1a600000 	.word	0x1a600000
 8006134:	3dd0b461 	.word	0x3dd0b461
 8006138:	2e037073 	.word	0x2e037073
 800613c:	3ba3198a 	.word	0x3ba3198a
 8006140:	6dc9c883 	.word	0x6dc9c883
 8006144:	3fe45f30 	.word	0x3fe45f30
 8006148:	2e000000 	.word	0x2e000000
 800614c:	3ba3198a 	.word	0x3ba3198a
 8006150:	252049c1 	.word	0x252049c1
 8006154:	397b839a 	.word	0x397b839a
 8006158:	3fe921fb 	.word	0x3fe921fb
 800615c:	4002d97b 	.word	0x4002d97b
 8006160:	3ff921fb 	.word	0x3ff921fb
 8006164:	413921fb 	.word	0x413921fb
 8006168:	3fe00000 	.word	0x3fe00000
 800616c:	0800b47c 	.word	0x0800b47c
 8006170:	7fefffff 	.word	0x7fefffff
 8006174:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006178:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800617c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006180:	460f      	mov	r7, r1
 8006182:	4606      	mov	r6, r0
 8006184:	f7fa fc3a 	bl	80009fc <__aeabi_d2iz>
 8006188:	f7fa f934 	bl	80003f4 <__aeabi_i2d>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006198:	f7f9 ffde 	bl	8000158 <__aeabi_dsub>
 800619c:	2200      	movs	r2, #0
 800619e:	4b22      	ldr	r3, [pc, #136]	; (8006228 <__ieee754_rem_pio2+0x3e8>)
 80061a0:	f7fa f992 	bl	80004c8 <__aeabi_dmul>
 80061a4:	460f      	mov	r7, r1
 80061a6:	4606      	mov	r6, r0
 80061a8:	f7fa fc28 	bl	80009fc <__aeabi_d2iz>
 80061ac:	f7fa f922 	bl	80003f4 <__aeabi_i2d>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4630      	mov	r0, r6
 80061b6:	4639      	mov	r1, r7
 80061b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061bc:	f7f9 ffcc 	bl	8000158 <__aeabi_dsub>
 80061c0:	2200      	movs	r2, #0
 80061c2:	4b19      	ldr	r3, [pc, #100]	; (8006228 <__ieee754_rem_pio2+0x3e8>)
 80061c4:	f7fa f980 	bl	80004c8 <__aeabi_dmul>
 80061c8:	f04f 0803 	mov.w	r8, #3
 80061cc:	2600      	movs	r6, #0
 80061ce:	2700      	movs	r7, #0
 80061d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061d4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80061d8:	4632      	mov	r2, r6
 80061da:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80061de:	463b      	mov	r3, r7
 80061e0:	46c2      	mov	sl, r8
 80061e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80061e6:	f7fa fbd7 	bl	8000998 <__aeabi_dcmpeq>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d1f4      	bne.n	80061d8 <__ieee754_rem_pio2+0x398>
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <__ieee754_rem_pio2+0x3ec>)
 80061f0:	462a      	mov	r2, r5
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2302      	movs	r3, #2
 80061f6:	4621      	mov	r1, r4
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	a806      	add	r0, sp, #24
 80061fc:	4653      	mov	r3, sl
 80061fe:	f000 f8d5 	bl	80063ac <__kernel_rem_pio2>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	4605      	mov	r5, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f6bf ae51 	bge.w	8005eae <__ieee754_rem_pio2+0x6e>
 800620c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006214:	e9c4 2300 	strd	r2, r3, [r4]
 8006218:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800621c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006220:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006224:	e703      	b.n	800602e <__ieee754_rem_pio2+0x1ee>
 8006226:	bf00      	nop
 8006228:	41700000 	.word	0x41700000
 800622c:	0800b4fc 	.word	0x0800b4fc

08006230 <__kernel_cos>:
 8006230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006238:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800623c:	4680      	mov	r8, r0
 800623e:	460f      	mov	r7, r1
 8006240:	e9cd 2300 	strd	r2, r3, [sp]
 8006244:	da04      	bge.n	8006250 <__kernel_cos+0x20>
 8006246:	f7fa fbd9 	bl	80009fc <__aeabi_d2iz>
 800624a:	2800      	cmp	r0, #0
 800624c:	f000 8086 	beq.w	800635c <__kernel_cos+0x12c>
 8006250:	4642      	mov	r2, r8
 8006252:	463b      	mov	r3, r7
 8006254:	4640      	mov	r0, r8
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa f936 	bl	80004c8 <__aeabi_dmul>
 800625c:	2200      	movs	r2, #0
 800625e:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <__kernel_cos+0x168>)
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	f7fa f930 	bl	80004c8 <__aeabi_dmul>
 8006268:	a33f      	add	r3, pc, #252	; (adr r3, 8006368 <__kernel_cos+0x138>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	4682      	mov	sl, r0
 8006270:	468b      	mov	fp, r1
 8006272:	4620      	mov	r0, r4
 8006274:	4629      	mov	r1, r5
 8006276:	f7fa f927 	bl	80004c8 <__aeabi_dmul>
 800627a:	a33d      	add	r3, pc, #244	; (adr r3, 8006370 <__kernel_cos+0x140>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7f9 ff6c 	bl	800015c <__adddf3>
 8006284:	4622      	mov	r2, r4
 8006286:	462b      	mov	r3, r5
 8006288:	f7fa f91e 	bl	80004c8 <__aeabi_dmul>
 800628c:	a33a      	add	r3, pc, #232	; (adr r3, 8006378 <__kernel_cos+0x148>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7f9 ff61 	bl	8000158 <__aeabi_dsub>
 8006296:	4622      	mov	r2, r4
 8006298:	462b      	mov	r3, r5
 800629a:	f7fa f915 	bl	80004c8 <__aeabi_dmul>
 800629e:	a338      	add	r3, pc, #224	; (adr r3, 8006380 <__kernel_cos+0x150>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7f9 ff5a 	bl	800015c <__adddf3>
 80062a8:	4622      	mov	r2, r4
 80062aa:	462b      	mov	r3, r5
 80062ac:	f7fa f90c 	bl	80004c8 <__aeabi_dmul>
 80062b0:	a335      	add	r3, pc, #212	; (adr r3, 8006388 <__kernel_cos+0x158>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f7f9 ff4f 	bl	8000158 <__aeabi_dsub>
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f7fa f903 	bl	80004c8 <__aeabi_dmul>
 80062c2:	a333      	add	r3, pc, #204	; (adr r3, 8006390 <__kernel_cos+0x160>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7f9 ff48 	bl	800015c <__adddf3>
 80062cc:	4622      	mov	r2, r4
 80062ce:	462b      	mov	r3, r5
 80062d0:	f7fa f8fa 	bl	80004c8 <__aeabi_dmul>
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	f7fa f8f6 	bl	80004c8 <__aeabi_dmul>
 80062dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	4640      	mov	r0, r8
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa f8ee 	bl	80004c8 <__aeabi_dmul>
 80062ec:	460b      	mov	r3, r1
 80062ee:	4602      	mov	r2, r0
 80062f0:	4629      	mov	r1, r5
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7f9 ff30 	bl	8000158 <__aeabi_dsub>
 80062f8:	4b28      	ldr	r3, [pc, #160]	; (800639c <__kernel_cos+0x16c>)
 80062fa:	4680      	mov	r8, r0
 80062fc:	429e      	cmp	r6, r3
 80062fe:	4689      	mov	r9, r1
 8006300:	dc0e      	bgt.n	8006320 <__kernel_cos+0xf0>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4650      	mov	r0, sl
 8006308:	4659      	mov	r1, fp
 800630a:	f7f9 ff25 	bl	8000158 <__aeabi_dsub>
 800630e:	4602      	mov	r2, r0
 8006310:	2000      	movs	r0, #0
 8006312:	460b      	mov	r3, r1
 8006314:	4922      	ldr	r1, [pc, #136]	; (80063a0 <__kernel_cos+0x170>)
 8006316:	f7f9 ff1f 	bl	8000158 <__aeabi_dsub>
 800631a:	b003      	add	sp, #12
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	2400      	movs	r4, #0
 8006322:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <__kernel_cos+0x174>)
 8006324:	4622      	mov	r2, r4
 8006326:	429e      	cmp	r6, r3
 8006328:	bfcc      	ite	gt
 800632a:	4d1f      	ldrgt	r5, [pc, #124]	; (80063a8 <__kernel_cos+0x178>)
 800632c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006330:	462b      	mov	r3, r5
 8006332:	2000      	movs	r0, #0
 8006334:	491a      	ldr	r1, [pc, #104]	; (80063a0 <__kernel_cos+0x170>)
 8006336:	f7f9 ff0f 	bl	8000158 <__aeabi_dsub>
 800633a:	4622      	mov	r2, r4
 800633c:	4606      	mov	r6, r0
 800633e:	460f      	mov	r7, r1
 8006340:	462b      	mov	r3, r5
 8006342:	4650      	mov	r0, sl
 8006344:	4659      	mov	r1, fp
 8006346:	f7f9 ff07 	bl	8000158 <__aeabi_dsub>
 800634a:	4642      	mov	r2, r8
 800634c:	464b      	mov	r3, r9
 800634e:	f7f9 ff03 	bl	8000158 <__aeabi_dsub>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	e7dc      	b.n	8006316 <__kernel_cos+0xe6>
 800635c:	2000      	movs	r0, #0
 800635e:	4910      	ldr	r1, [pc, #64]	; (80063a0 <__kernel_cos+0x170>)
 8006360:	e7db      	b.n	800631a <__kernel_cos+0xea>
 8006362:	bf00      	nop
 8006364:	f3af 8000 	nop.w
 8006368:	be8838d4 	.word	0xbe8838d4
 800636c:	bda8fae9 	.word	0xbda8fae9
 8006370:	bdb4b1c4 	.word	0xbdb4b1c4
 8006374:	3e21ee9e 	.word	0x3e21ee9e
 8006378:	809c52ad 	.word	0x809c52ad
 800637c:	3e927e4f 	.word	0x3e927e4f
 8006380:	19cb1590 	.word	0x19cb1590
 8006384:	3efa01a0 	.word	0x3efa01a0
 8006388:	16c15177 	.word	0x16c15177
 800638c:	3f56c16c 	.word	0x3f56c16c
 8006390:	5555554c 	.word	0x5555554c
 8006394:	3fa55555 	.word	0x3fa55555
 8006398:	3fe00000 	.word	0x3fe00000
 800639c:	3fd33332 	.word	0x3fd33332
 80063a0:	3ff00000 	.word	0x3ff00000
 80063a4:	3fe90000 	.word	0x3fe90000
 80063a8:	3fd20000 	.word	0x3fd20000

080063ac <__kernel_rem_pio2>:
 80063ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80063b4:	9308      	str	r3, [sp, #32]
 80063b6:	9106      	str	r1, [sp, #24]
 80063b8:	4bb6      	ldr	r3, [pc, #728]	; (8006694 <__kernel_rem_pio2+0x2e8>)
 80063ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80063bc:	f112 0f14 	cmn.w	r2, #20
 80063c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063c4:	bfa8      	it	ge
 80063c6:	1ed4      	subge	r4, r2, #3
 80063c8:	9302      	str	r3, [sp, #8]
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	bfb8      	it	lt
 80063ce:	2400      	movlt	r4, #0
 80063d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	bfa4      	itt	ge
 80063d8:	2318      	movge	r3, #24
 80063da:	fb94 f4f3 	sdivge	r4, r4, r3
 80063de:	f06f 0317 	mvn.w	r3, #23
 80063e2:	fb04 3303 	mla	r3, r4, r3, r3
 80063e6:	eb03 0b02 	add.w	fp, r3, r2
 80063ea:	9a07      	ldr	r2, [sp, #28]
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	1aa7      	subs	r7, r4, r2
 80063f0:	eb03 0802 	add.w	r8, r3, r2
 80063f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80063f6:	2500      	movs	r5, #0
 80063f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	9009      	str	r0, [sp, #36]	; 0x24
 8006402:	ae20      	add	r6, sp, #128	; 0x80
 8006404:	4545      	cmp	r5, r8
 8006406:	dd14      	ble.n	8006432 <__kernel_rem_pio2+0x86>
 8006408:	f04f 0800 	mov.w	r8, #0
 800640c:	9a08      	ldr	r2, [sp, #32]
 800640e:	ab20      	add	r3, sp, #128	; 0x80
 8006410:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006414:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	4598      	cmp	r8, r3
 800641c:	dc35      	bgt.n	800648a <__kernel_rem_pio2+0xde>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	2200      	movs	r2, #0
 8006422:	f1a3 0908 	sub.w	r9, r3, #8
 8006426:	2300      	movs	r3, #0
 8006428:	462f      	mov	r7, r5
 800642a:	2600      	movs	r6, #0
 800642c:	e9cd 2300 	strd	r2, r3, [sp]
 8006430:	e01f      	b.n	8006472 <__kernel_rem_pio2+0xc6>
 8006432:	42ef      	cmn	r7, r5
 8006434:	d40b      	bmi.n	800644e <__kernel_rem_pio2+0xa2>
 8006436:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800643a:	e9cd 2300 	strd	r2, r3, [sp]
 800643e:	f7f9 ffd9 	bl	80003f4 <__aeabi_i2d>
 8006442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006446:	e8e6 0102 	strd	r0, r1, [r6], #8
 800644a:	3501      	adds	r5, #1
 800644c:	e7da      	b.n	8006404 <__kernel_rem_pio2+0x58>
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	e7f8      	b.n	8006446 <__kernel_rem_pio2+0x9a>
 8006454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006458:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800645c:	f7fa f834 	bl	80004c8 <__aeabi_dmul>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006468:	f7f9 fe78 	bl	800015c <__adddf3>
 800646c:	e9cd 0100 	strd	r0, r1, [sp]
 8006470:	3601      	adds	r6, #1
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	3f08      	subs	r7, #8
 8006476:	429e      	cmp	r6, r3
 8006478:	ddec      	ble.n	8006454 <__kernel_rem_pio2+0xa8>
 800647a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800647e:	f108 0801 	add.w	r8, r8, #1
 8006482:	e8ea 2302 	strd	r2, r3, [sl], #8
 8006486:	3508      	adds	r5, #8
 8006488:	e7c6      	b.n	8006418 <__kernel_rem_pio2+0x6c>
 800648a:	9b02      	ldr	r3, [sp, #8]
 800648c:	aa0c      	add	r2, sp, #48	; 0x30
 800648e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006492:	930b      	str	r3, [sp, #44]	; 0x2c
 8006494:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006496:	9e02      	ldr	r6, [sp, #8]
 8006498:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800649c:	930a      	str	r3, [sp, #40]	; 0x28
 800649e:	ab98      	add	r3, sp, #608	; 0x260
 80064a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064a4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80064a8:	ab70      	add	r3, sp, #448	; 0x1c0
 80064aa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80064ae:	46d0      	mov	r8, sl
 80064b0:	46b1      	mov	r9, r6
 80064b2:	af0c      	add	r7, sp, #48	; 0x30
 80064b4:	9700      	str	r7, [sp, #0]
 80064b6:	f1b9 0f00 	cmp.w	r9, #0
 80064ba:	f1a8 0808 	sub.w	r8, r8, #8
 80064be:	dc71      	bgt.n	80065a4 <__kernel_rem_pio2+0x1f8>
 80064c0:	465a      	mov	r2, fp
 80064c2:	4620      	mov	r0, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	f000 fbef 	bl	8006ca8 <scalbn>
 80064ca:	2200      	movs	r2, #0
 80064cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80064d0:	4604      	mov	r4, r0
 80064d2:	460d      	mov	r5, r1
 80064d4:	f7f9 fff8 	bl	80004c8 <__aeabi_dmul>
 80064d8:	f000 fb66 	bl	8006ba8 <floor>
 80064dc:	2200      	movs	r2, #0
 80064de:	4b6e      	ldr	r3, [pc, #440]	; (8006698 <__kernel_rem_pio2+0x2ec>)
 80064e0:	f7f9 fff2 	bl	80004c8 <__aeabi_dmul>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4620      	mov	r0, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	f7f9 fe34 	bl	8000158 <__aeabi_dsub>
 80064f0:	460d      	mov	r5, r1
 80064f2:	4604      	mov	r4, r0
 80064f4:	f7fa fa82 	bl	80009fc <__aeabi_d2iz>
 80064f8:	9004      	str	r0, [sp, #16]
 80064fa:	f7f9 ff7b 	bl	80003f4 <__aeabi_i2d>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4620      	mov	r0, r4
 8006504:	4629      	mov	r1, r5
 8006506:	f7f9 fe27 	bl	8000158 <__aeabi_dsub>
 800650a:	f1bb 0f00 	cmp.w	fp, #0
 800650e:	4680      	mov	r8, r0
 8006510:	4689      	mov	r9, r1
 8006512:	dd70      	ble.n	80065f6 <__kernel_rem_pio2+0x24a>
 8006514:	1e72      	subs	r2, r6, #1
 8006516:	ab0c      	add	r3, sp, #48	; 0x30
 8006518:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800651c:	9c04      	ldr	r4, [sp, #16]
 800651e:	f1cb 0118 	rsb	r1, fp, #24
 8006522:	fa40 f301 	asr.w	r3, r0, r1
 8006526:	441c      	add	r4, r3
 8006528:	408b      	lsls	r3, r1
 800652a:	1ac0      	subs	r0, r0, r3
 800652c:	ab0c      	add	r3, sp, #48	; 0x30
 800652e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006532:	f1cb 0317 	rsb	r3, fp, #23
 8006536:	9404      	str	r4, [sp, #16]
 8006538:	fa40 f303 	asr.w	r3, r0, r3
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	dd66      	ble.n	8006612 <__kernel_rem_pio2+0x266>
 8006544:	2200      	movs	r2, #0
 8006546:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800654a:	4614      	mov	r4, r2
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	3301      	adds	r3, #1
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	4296      	cmp	r6, r2
 8006554:	f300 80ac 	bgt.w	80066b0 <__kernel_rem_pio2+0x304>
 8006558:	f1bb 0f00 	cmp.w	fp, #0
 800655c:	dd07      	ble.n	800656e <__kernel_rem_pio2+0x1c2>
 800655e:	f1bb 0f01 	cmp.w	fp, #1
 8006562:	f000 80b4 	beq.w	80066ce <__kernel_rem_pio2+0x322>
 8006566:	f1bb 0f02 	cmp.w	fp, #2
 800656a:	f000 80ba 	beq.w	80066e2 <__kernel_rem_pio2+0x336>
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d14e      	bne.n	8006612 <__kernel_rem_pio2+0x266>
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	2000      	movs	r0, #0
 800657a:	4948      	ldr	r1, [pc, #288]	; (800669c <__kernel_rem_pio2+0x2f0>)
 800657c:	f7f9 fdec 	bl	8000158 <__aeabi_dsub>
 8006580:	4680      	mov	r8, r0
 8006582:	4689      	mov	r9, r1
 8006584:	2c00      	cmp	r4, #0
 8006586:	d044      	beq.n	8006612 <__kernel_rem_pio2+0x266>
 8006588:	465a      	mov	r2, fp
 800658a:	2000      	movs	r0, #0
 800658c:	4943      	ldr	r1, [pc, #268]	; (800669c <__kernel_rem_pio2+0x2f0>)
 800658e:	f000 fb8b 	bl	8006ca8 <scalbn>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7f9 fddd 	bl	8000158 <__aeabi_dsub>
 800659e:	4680      	mov	r8, r0
 80065a0:	4689      	mov	r9, r1
 80065a2:	e036      	b.n	8006612 <__kernel_rem_pio2+0x266>
 80065a4:	2200      	movs	r2, #0
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <__kernel_rem_pio2+0x2f4>)
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	f7f9 ff8c 	bl	80004c8 <__aeabi_dmul>
 80065b0:	f7fa fa24 	bl	80009fc <__aeabi_d2iz>
 80065b4:	f7f9 ff1e 	bl	80003f4 <__aeabi_i2d>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <__kernel_rem_pio2+0x2f8>)
 80065c4:	f7f9 ff80 	bl	80004c8 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7f9 fdc2 	bl	8000158 <__aeabi_dsub>
 80065d4:	f7fa fa12 	bl	80009fc <__aeabi_d2iz>
 80065d8:	9b00      	ldr	r3, [sp, #0]
 80065da:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80065de:	f843 0b04 	str.w	r0, [r3], #4
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065e8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80065ec:	f7f9 fdb6 	bl	800015c <__adddf3>
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	e75f      	b.n	80064b6 <__kernel_rem_pio2+0x10a>
 80065f6:	d105      	bne.n	8006604 <__kernel_rem_pio2+0x258>
 80065f8:	1e73      	subs	r3, r6, #1
 80065fa:	aa0c      	add	r2, sp, #48	; 0x30
 80065fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006600:	15c3      	asrs	r3, r0, #23
 8006602:	e79b      	b.n	800653c <__kernel_rem_pio2+0x190>
 8006604:	2200      	movs	r2, #0
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <__kernel_rem_pio2+0x2fc>)
 8006608:	f7fa f9e4 	bl	80009d4 <__aeabi_dcmpge>
 800660c:	2800      	cmp	r0, #0
 800660e:	d13e      	bne.n	800668e <__kernel_rem_pio2+0x2e2>
 8006610:	9000      	str	r0, [sp, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	2300      	movs	r3, #0
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7fa f9bd 	bl	8000998 <__aeabi_dcmpeq>
 800661e:	2800      	cmp	r0, #0
 8006620:	f000 80b1 	beq.w	8006786 <__kernel_rem_pio2+0x3da>
 8006624:	1e74      	subs	r4, r6, #1
 8006626:	4623      	mov	r3, r4
 8006628:	2200      	movs	r2, #0
 800662a:	9902      	ldr	r1, [sp, #8]
 800662c:	428b      	cmp	r3, r1
 800662e:	da5f      	bge.n	80066f0 <__kernel_rem_pio2+0x344>
 8006630:	2a00      	cmp	r2, #0
 8006632:	d074      	beq.n	800671e <__kernel_rem_pio2+0x372>
 8006634:	ab0c      	add	r3, sp, #48	; 0x30
 8006636:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800663a:	f1ab 0b18 	sub.w	fp, fp, #24
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 809f 	beq.w	8006782 <__kernel_rem_pio2+0x3d6>
 8006644:	465a      	mov	r2, fp
 8006646:	2000      	movs	r0, #0
 8006648:	4914      	ldr	r1, [pc, #80]	; (800669c <__kernel_rem_pio2+0x2f0>)
 800664a:	f000 fb2d 	bl	8006ca8 <scalbn>
 800664e:	46a2      	mov	sl, r4
 8006650:	4606      	mov	r6, r0
 8006652:	460f      	mov	r7, r1
 8006654:	f04f 0800 	mov.w	r8, #0
 8006658:	ab70      	add	r3, sp, #448	; 0x1c0
 800665a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80066a0 <__kernel_rem_pio2+0x2f4>
 800665e:	00e5      	lsls	r5, r4, #3
 8006660:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006664:	f1ba 0f00 	cmp.w	sl, #0
 8006668:	f280 80c3 	bge.w	80067f2 <__kernel_rem_pio2+0x446>
 800666c:	4626      	mov	r6, r4
 800666e:	2e00      	cmp	r6, #0
 8006670:	f2c0 80f5 	blt.w	800685e <__kernel_rem_pio2+0x4b2>
 8006674:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <__kernel_rem_pio2+0x300>)
 8006676:	f04f 0a00 	mov.w	sl, #0
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	ab70      	add	r3, sp, #448	; 0x1c0
 800667e:	f04f 0b00 	mov.w	fp, #0
 8006682:	f04f 0800 	mov.w	r8, #0
 8006686:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800668a:	1ba7      	subs	r7, r4, r6
 800668c:	e0db      	b.n	8006846 <__kernel_rem_pio2+0x49a>
 800668e:	2302      	movs	r3, #2
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	e757      	b.n	8006544 <__kernel_rem_pio2+0x198>
 8006694:	0800b648 	.word	0x0800b648
 8006698:	40200000 	.word	0x40200000
 800669c:	3ff00000 	.word	0x3ff00000
 80066a0:	3e700000 	.word	0x3e700000
 80066a4:	41700000 	.word	0x41700000
 80066a8:	3fe00000 	.word	0x3fe00000
 80066ac:	0800b608 	.word	0x0800b608
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	b944      	cbnz	r4, 80066c6 <__kernel_rem_pio2+0x31a>
 80066b4:	b11b      	cbz	r3, 80066be <__kernel_rem_pio2+0x312>
 80066b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	2301      	movs	r3, #1
 80066be:	461c      	mov	r4, r3
 80066c0:	3201      	adds	r2, #1
 80066c2:	3704      	adds	r7, #4
 80066c4:	e745      	b.n	8006552 <__kernel_rem_pio2+0x1a6>
 80066c6:	1acb      	subs	r3, r1, r3
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4623      	mov	r3, r4
 80066cc:	e7f7      	b.n	80066be <__kernel_rem_pio2+0x312>
 80066ce:	1e72      	subs	r2, r6, #1
 80066d0:	ab0c      	add	r3, sp, #48	; 0x30
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80066da:	a90c      	add	r1, sp, #48	; 0x30
 80066dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80066e0:	e745      	b.n	800656e <__kernel_rem_pio2+0x1c2>
 80066e2:	1e72      	subs	r2, r6, #1
 80066e4:	ab0c      	add	r3, sp, #48	; 0x30
 80066e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80066ee:	e7f4      	b.n	80066da <__kernel_rem_pio2+0x32e>
 80066f0:	a90c      	add	r1, sp, #48	; 0x30
 80066f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	430a      	orrs	r2, r1
 80066fa:	e796      	b.n	800662a <__kernel_rem_pio2+0x27e>
 80066fc:	3401      	adds	r4, #1
 80066fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006702:	2a00      	cmp	r2, #0
 8006704:	d0fa      	beq.n	80066fc <__kernel_rem_pio2+0x350>
 8006706:	9b08      	ldr	r3, [sp, #32]
 8006708:	f106 0801 	add.w	r8, r6, #1
 800670c:	18f5      	adds	r5, r6, r3
 800670e:	ab20      	add	r3, sp, #128	; 0x80
 8006710:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006714:	4434      	add	r4, r6
 8006716:	4544      	cmp	r4, r8
 8006718:	da04      	bge.n	8006724 <__kernel_rem_pio2+0x378>
 800671a:	4626      	mov	r6, r4
 800671c:	e6bf      	b.n	800649e <__kernel_rem_pio2+0xf2>
 800671e:	2401      	movs	r4, #1
 8006720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006722:	e7ec      	b.n	80066fe <__kernel_rem_pio2+0x352>
 8006724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006726:	f04f 0900 	mov.w	r9, #0
 800672a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800672e:	f7f9 fe61 	bl	80003f4 <__aeabi_i2d>
 8006732:	2600      	movs	r6, #0
 8006734:	2700      	movs	r7, #0
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	e9c5 0100 	strd	r0, r1, [r5]
 800673c:	3b08      	subs	r3, #8
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	9504      	str	r5, [sp, #16]
 8006742:	9b07      	ldr	r3, [sp, #28]
 8006744:	4599      	cmp	r9, r3
 8006746:	dd05      	ble.n	8006754 <__kernel_rem_pio2+0x3a8>
 8006748:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800674c:	f108 0801 	add.w	r8, r8, #1
 8006750:	3508      	adds	r5, #8
 8006752:	e7e0      	b.n	8006716 <__kernel_rem_pio2+0x36a>
 8006754:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006758:	9900      	ldr	r1, [sp, #0]
 800675a:	f109 0901 	add.w	r9, r9, #1
 800675e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006762:	9100      	str	r1, [sp, #0]
 8006764:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8006768:	f8cd c010 	str.w	ip, [sp, #16]
 800676c:	f7f9 feac 	bl	80004c8 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4630      	mov	r0, r6
 8006776:	4639      	mov	r1, r7
 8006778:	f7f9 fcf0 	bl	800015c <__adddf3>
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	e7df      	b.n	8006742 <__kernel_rem_pio2+0x396>
 8006782:	3c01      	subs	r4, #1
 8006784:	e756      	b.n	8006634 <__kernel_rem_pio2+0x288>
 8006786:	f1cb 0200 	rsb	r2, fp, #0
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f000 fa8b 	bl	8006ca8 <scalbn>
 8006792:	2200      	movs	r2, #0
 8006794:	4ba4      	ldr	r3, [pc, #656]	; (8006a28 <__kernel_rem_pio2+0x67c>)
 8006796:	4604      	mov	r4, r0
 8006798:	460d      	mov	r5, r1
 800679a:	f7fa f91b 	bl	80009d4 <__aeabi_dcmpge>
 800679e:	b1f8      	cbz	r0, 80067e0 <__kernel_rem_pio2+0x434>
 80067a0:	2200      	movs	r2, #0
 80067a2:	4ba2      	ldr	r3, [pc, #648]	; (8006a2c <__kernel_rem_pio2+0x680>)
 80067a4:	4620      	mov	r0, r4
 80067a6:	4629      	mov	r1, r5
 80067a8:	f7f9 fe8e 	bl	80004c8 <__aeabi_dmul>
 80067ac:	f7fa f926 	bl	80009fc <__aeabi_d2iz>
 80067b0:	4607      	mov	r7, r0
 80067b2:	f7f9 fe1f 	bl	80003f4 <__aeabi_i2d>
 80067b6:	2200      	movs	r2, #0
 80067b8:	4b9b      	ldr	r3, [pc, #620]	; (8006a28 <__kernel_rem_pio2+0x67c>)
 80067ba:	f7f9 fe85 	bl	80004c8 <__aeabi_dmul>
 80067be:	460b      	mov	r3, r1
 80067c0:	4602      	mov	r2, r0
 80067c2:	4629      	mov	r1, r5
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7f9 fcc7 	bl	8000158 <__aeabi_dsub>
 80067ca:	f7fa f917 	bl	80009fc <__aeabi_d2iz>
 80067ce:	1c74      	adds	r4, r6, #1
 80067d0:	ab0c      	add	r3, sp, #48	; 0x30
 80067d2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80067d6:	f10b 0b18 	add.w	fp, fp, #24
 80067da:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80067de:	e731      	b.n	8006644 <__kernel_rem_pio2+0x298>
 80067e0:	4620      	mov	r0, r4
 80067e2:	4629      	mov	r1, r5
 80067e4:	f7fa f90a 	bl	80009fc <__aeabi_d2iz>
 80067e8:	ab0c      	add	r3, sp, #48	; 0x30
 80067ea:	4634      	mov	r4, r6
 80067ec:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80067f0:	e728      	b.n	8006644 <__kernel_rem_pio2+0x298>
 80067f2:	ab0c      	add	r3, sp, #48	; 0x30
 80067f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80067f8:	f7f9 fdfc 	bl	80003f4 <__aeabi_i2d>
 80067fc:	4632      	mov	r2, r6
 80067fe:	463b      	mov	r3, r7
 8006800:	f7f9 fe62 	bl	80004c8 <__aeabi_dmul>
 8006804:	4642      	mov	r2, r8
 8006806:	e86b 0102 	strd	r0, r1, [fp], #-8
 800680a:	464b      	mov	r3, r9
 800680c:	4630      	mov	r0, r6
 800680e:	4639      	mov	r1, r7
 8006810:	f7f9 fe5a 	bl	80004c8 <__aeabi_dmul>
 8006814:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006818:	4606      	mov	r6, r0
 800681a:	460f      	mov	r7, r1
 800681c:	e722      	b.n	8006664 <__kernel_rem_pio2+0x2b8>
 800681e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006822:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006826:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800682a:	f8cd c01c 	str.w	ip, [sp, #28]
 800682e:	f7f9 fe4b 	bl	80004c8 <__aeabi_dmul>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4650      	mov	r0, sl
 8006838:	4659      	mov	r1, fp
 800683a:	f7f9 fc8f 	bl	800015c <__adddf3>
 800683e:	4682      	mov	sl, r0
 8006840:	468b      	mov	fp, r1
 8006842:	f108 0801 	add.w	r8, r8, #1
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	4598      	cmp	r8, r3
 800684a:	dc01      	bgt.n	8006850 <__kernel_rem_pio2+0x4a4>
 800684c:	45b8      	cmp	r8, r7
 800684e:	dde6      	ble.n	800681e <__kernel_rem_pio2+0x472>
 8006850:	ab48      	add	r3, sp, #288	; 0x120
 8006852:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006856:	e9c7 ab00 	strd	sl, fp, [r7]
 800685a:	3e01      	subs	r6, #1
 800685c:	e707      	b.n	800666e <__kernel_rem_pio2+0x2c2>
 800685e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006860:	2b02      	cmp	r3, #2
 8006862:	dc09      	bgt.n	8006878 <__kernel_rem_pio2+0x4cc>
 8006864:	2b00      	cmp	r3, #0
 8006866:	dc32      	bgt.n	80068ce <__kernel_rem_pio2+0x522>
 8006868:	d05a      	beq.n	8006920 <__kernel_rem_pio2+0x574>
 800686a:	9b04      	ldr	r3, [sp, #16]
 800686c:	f003 0007 	and.w	r0, r3, #7
 8006870:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800687a:	2b03      	cmp	r3, #3
 800687c:	d1f5      	bne.n	800686a <__kernel_rem_pio2+0x4be>
 800687e:	ab48      	add	r3, sp, #288	; 0x120
 8006880:	441d      	add	r5, r3
 8006882:	46aa      	mov	sl, r5
 8006884:	46a3      	mov	fp, r4
 8006886:	f1bb 0f00 	cmp.w	fp, #0
 800688a:	dc76      	bgt.n	800697a <__kernel_rem_pio2+0x5ce>
 800688c:	46aa      	mov	sl, r5
 800688e:	46a3      	mov	fp, r4
 8006890:	f1bb 0f01 	cmp.w	fp, #1
 8006894:	f300 8090 	bgt.w	80069b8 <__kernel_rem_pio2+0x60c>
 8006898:	2700      	movs	r7, #0
 800689a:	463e      	mov	r6, r7
 800689c:	2c01      	cmp	r4, #1
 800689e:	f300 80aa 	bgt.w	80069f6 <__kernel_rem_pio2+0x64a>
 80068a2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80068a6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 80ac 	bne.w	8006a0a <__kernel_rem_pio2+0x65e>
 80068b2:	4603      	mov	r3, r0
 80068b4:	462a      	mov	r2, r5
 80068b6:	9806      	ldr	r0, [sp, #24]
 80068b8:	e9c0 2300 	strd	r2, r3, [r0]
 80068bc:	4622      	mov	r2, r4
 80068be:	460b      	mov	r3, r1
 80068c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80068c4:	463a      	mov	r2, r7
 80068c6:	4633      	mov	r3, r6
 80068c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80068cc:	e7cd      	b.n	800686a <__kernel_rem_pio2+0x4be>
 80068ce:	2000      	movs	r0, #0
 80068d0:	46a0      	mov	r8, r4
 80068d2:	4601      	mov	r1, r0
 80068d4:	ab48      	add	r3, sp, #288	; 0x120
 80068d6:	441d      	add	r5, r3
 80068d8:	f1b8 0f00 	cmp.w	r8, #0
 80068dc:	da3a      	bge.n	8006954 <__kernel_rem_pio2+0x5a8>
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d03e      	beq.n	8006962 <__kernel_rem_pio2+0x5b6>
 80068e4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80068e8:	4602      	mov	r2, r0
 80068ea:	462b      	mov	r3, r5
 80068ec:	9d06      	ldr	r5, [sp, #24]
 80068ee:	2601      	movs	r6, #1
 80068f0:	e9c5 2300 	strd	r2, r3, [r5]
 80068f4:	460b      	mov	r3, r1
 80068f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80068fa:	f7f9 fc2d 	bl	8000158 <__aeabi_dsub>
 80068fe:	4684      	mov	ip, r0
 8006900:	460f      	mov	r7, r1
 8006902:	ad48      	add	r5, sp, #288	; 0x120
 8006904:	42b4      	cmp	r4, r6
 8006906:	f105 0508 	add.w	r5, r5, #8
 800690a:	da2c      	bge.n	8006966 <__kernel_rem_pio2+0x5ba>
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	b10b      	cbz	r3, 8006914 <__kernel_rem_pio2+0x568>
 8006910:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006914:	4662      	mov	r2, ip
 8006916:	463b      	mov	r3, r7
 8006918:	9906      	ldr	r1, [sp, #24]
 800691a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800691e:	e7a4      	b.n	800686a <__kernel_rem_pio2+0x4be>
 8006920:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006922:	ab48      	add	r3, sp, #288	; 0x120
 8006924:	4637      	mov	r7, r6
 8006926:	441d      	add	r5, r3
 8006928:	2c00      	cmp	r4, #0
 800692a:	da09      	bge.n	8006940 <__kernel_rem_pio2+0x594>
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	b10b      	cbz	r3, 8006934 <__kernel_rem_pio2+0x588>
 8006930:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006934:	4632      	mov	r2, r6
 8006936:	463b      	mov	r3, r7
 8006938:	9906      	ldr	r1, [sp, #24]
 800693a:	e9c1 2300 	strd	r2, r3, [r1]
 800693e:	e794      	b.n	800686a <__kernel_rem_pio2+0x4be>
 8006940:	4630      	mov	r0, r6
 8006942:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006946:	4639      	mov	r1, r7
 8006948:	f7f9 fc08 	bl	800015c <__adddf3>
 800694c:	3c01      	subs	r4, #1
 800694e:	4606      	mov	r6, r0
 8006950:	460f      	mov	r7, r1
 8006952:	e7e9      	b.n	8006928 <__kernel_rem_pio2+0x57c>
 8006954:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006958:	f7f9 fc00 	bl	800015c <__adddf3>
 800695c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006960:	e7ba      	b.n	80068d8 <__kernel_rem_pio2+0x52c>
 8006962:	460d      	mov	r5, r1
 8006964:	e7c0      	b.n	80068e8 <__kernel_rem_pio2+0x53c>
 8006966:	4660      	mov	r0, ip
 8006968:	e9d5 2300 	ldrd	r2, r3, [r5]
 800696c:	4639      	mov	r1, r7
 800696e:	f7f9 fbf5 	bl	800015c <__adddf3>
 8006972:	3601      	adds	r6, #1
 8006974:	4684      	mov	ip, r0
 8006976:	460f      	mov	r7, r1
 8006978:	e7c4      	b.n	8006904 <__kernel_rem_pio2+0x558>
 800697a:	e9da 6700 	ldrd	r6, r7, [sl]
 800697e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006982:	4632      	mov	r2, r6
 8006984:	463b      	mov	r3, r7
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7f9 fbe7 	bl	800015c <__adddf3>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f7f9 fbdd 	bl	8000158 <__aeabi_dsub>
 800699e:	4632      	mov	r2, r6
 80069a0:	463b      	mov	r3, r7
 80069a2:	f7f9 fbdb 	bl	800015c <__adddf3>
 80069a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069aa:	e86a 0102 	strd	r0, r1, [sl], #-8
 80069ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80069b2:	e9ca 2300 	strd	r2, r3, [sl]
 80069b6:	e766      	b.n	8006886 <__kernel_rem_pio2+0x4da>
 80069b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80069bc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80069c0:	4642      	mov	r2, r8
 80069c2:	464b      	mov	r3, r9
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fbc8 	bl	800015c <__adddf3>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7f9 fbbe 	bl	8000158 <__aeabi_dsub>
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	f7f9 fbbc 	bl	800015c <__adddf3>
 80069e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069e8:	e86a 0102 	strd	r0, r1, [sl], #-8
 80069ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80069f0:	e9ca 2300 	strd	r2, r3, [sl]
 80069f4:	e74c      	b.n	8006890 <__kernel_rem_pio2+0x4e4>
 80069f6:	4638      	mov	r0, r7
 80069f8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80069fc:	4631      	mov	r1, r6
 80069fe:	f7f9 fbad 	bl	800015c <__adddf3>
 8006a02:	3c01      	subs	r4, #1
 8006a04:	4607      	mov	r7, r0
 8006a06:	460e      	mov	r6, r1
 8006a08:	e748      	b.n	800689c <__kernel_rem_pio2+0x4f0>
 8006a0a:	9b06      	ldr	r3, [sp, #24]
 8006a0c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006a10:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006a14:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006a18:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006a1c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006a20:	601d      	str	r5, [r3, #0]
 8006a22:	615e      	str	r6, [r3, #20]
 8006a24:	e721      	b.n	800686a <__kernel_rem_pio2+0x4be>
 8006a26:	bf00      	nop
 8006a28:	41700000 	.word	0x41700000
 8006a2c:	3e700000 	.word	0x3e700000

08006a30 <__kernel_sin>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	e9cd 2300 	strd	r2, r3, [sp]
 8006a3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006a42:	4682      	mov	sl, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006a48:	da03      	bge.n	8006a52 <__kernel_sin+0x22>
 8006a4a:	f7f9 ffd7 	bl	80009fc <__aeabi_d2iz>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d050      	beq.n	8006af4 <__kernel_sin+0xc4>
 8006a52:	4652      	mov	r2, sl
 8006a54:	4623      	mov	r3, r4
 8006a56:	4650      	mov	r0, sl
 8006a58:	4621      	mov	r1, r4
 8006a5a:	f7f9 fd35 	bl	80004c8 <__aeabi_dmul>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460f      	mov	r7, r1
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4650      	mov	r0, sl
 8006a68:	4621      	mov	r1, r4
 8006a6a:	f7f9 fd2d 	bl	80004c8 <__aeabi_dmul>
 8006a6e:	a33e      	add	r3, pc, #248	; (adr r3, 8006b68 <__kernel_sin+0x138>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	4680      	mov	r8, r0
 8006a76:	4689      	mov	r9, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fd24 	bl	80004c8 <__aeabi_dmul>
 8006a80:	a33b      	add	r3, pc, #236	; (adr r3, 8006b70 <__kernel_sin+0x140>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fb67 	bl	8000158 <__aeabi_dsub>
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	f7f9 fd1b 	bl	80004c8 <__aeabi_dmul>
 8006a92:	a339      	add	r3, pc, #228	; (adr r3, 8006b78 <__kernel_sin+0x148>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fb60 	bl	800015c <__adddf3>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7f9 fd12 	bl	80004c8 <__aeabi_dmul>
 8006aa4:	a336      	add	r3, pc, #216	; (adr r3, 8006b80 <__kernel_sin+0x150>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fb55 	bl	8000158 <__aeabi_dsub>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fd09 	bl	80004c8 <__aeabi_dmul>
 8006ab6:	a334      	add	r3, pc, #208	; (adr r3, 8006b88 <__kernel_sin+0x158>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fb4e 	bl	800015c <__adddf3>
 8006ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac4:	b9dd      	cbnz	r5, 8006afe <__kernel_sin+0xce>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4630      	mov	r0, r6
 8006acc:	4639      	mov	r1, r7
 8006ace:	f7f9 fcfb 	bl	80004c8 <__aeabi_dmul>
 8006ad2:	a32f      	add	r3, pc, #188	; (adr r3, 8006b90 <__kernel_sin+0x160>)
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f7f9 fb3e 	bl	8000158 <__aeabi_dsub>
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	f7f9 fcf2 	bl	80004c8 <__aeabi_dmul>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4650      	mov	r0, sl
 8006aea:	4621      	mov	r1, r4
 8006aec:	f7f9 fb36 	bl	800015c <__adddf3>
 8006af0:	4682      	mov	sl, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	4650      	mov	r0, sl
 8006af6:	4621      	mov	r1, r4
 8006af8:	b006      	add	sp, #24
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	2200      	movs	r2, #0
 8006b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b04:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <__kernel_sin+0x168>)
 8006b06:	f7f9 fcdf 	bl	80004c8 <__aeabi_dmul>
 8006b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b12:	4640      	mov	r0, r8
 8006b14:	4649      	mov	r1, r9
 8006b16:	f7f9 fcd7 	bl	80004c8 <__aeabi_dmul>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b22:	f7f9 fb19 	bl	8000158 <__aeabi_dsub>
 8006b26:	4632      	mov	r2, r6
 8006b28:	463b      	mov	r3, r7
 8006b2a:	f7f9 fccd 	bl	80004c8 <__aeabi_dmul>
 8006b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b32:	f7f9 fb11 	bl	8000158 <__aeabi_dsub>
 8006b36:	a316      	add	r3, pc, #88	; (adr r3, 8006b90 <__kernel_sin+0x160>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	460f      	mov	r7, r1
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fcc0 	bl	80004c8 <__aeabi_dmul>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 fb04 	bl	800015c <__adddf3>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4650      	mov	r0, sl
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	f7f9 fafc 	bl	8000158 <__aeabi_dsub>
 8006b60:	e7c6      	b.n	8006af0 <__kernel_sin+0xc0>
 8006b62:	bf00      	nop
 8006b64:	f3af 8000 	nop.w
 8006b68:	5acfd57c 	.word	0x5acfd57c
 8006b6c:	3de5d93a 	.word	0x3de5d93a
 8006b70:	8a2b9ceb 	.word	0x8a2b9ceb
 8006b74:	3e5ae5e6 	.word	0x3e5ae5e6
 8006b78:	57b1fe7d 	.word	0x57b1fe7d
 8006b7c:	3ec71de3 	.word	0x3ec71de3
 8006b80:	19c161d5 	.word	0x19c161d5
 8006b84:	3f2a01a0 	.word	0x3f2a01a0
 8006b88:	1110f8a6 	.word	0x1110f8a6
 8006b8c:	3f811111 	.word	0x3f811111
 8006b90:	55555549 	.word	0x55555549
 8006b94:	3fc55555 	.word	0x3fc55555
 8006b98:	3fe00000 	.word	0x3fe00000

08006b9c <fabs>:
 8006b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ba0:	4770      	bx	lr
 8006ba2:	0000      	movs	r0, r0
 8006ba4:	0000      	movs	r0, r0
	...

08006ba8 <floor>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006bb0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006bb4:	2e13      	cmp	r6, #19
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4607      	mov	r7, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	dc33      	bgt.n	8006c2a <floor+0x82>
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	da14      	bge.n	8006bf0 <floor+0x48>
 8006bc6:	a334      	add	r3, pc, #208	; (adr r3, 8006c98 <floor+0xf0>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 fac6 	bl	800015c <__adddf3>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f7f9 ff08 	bl	80009e8 <__aeabi_dcmpgt>
 8006bd8:	b138      	cbz	r0, 8006bea <floor+0x42>
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	da58      	bge.n	8006c90 <floor+0xe8>
 8006bde:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006be2:	431d      	orrs	r5, r3
 8006be4:	d001      	beq.n	8006bea <floor+0x42>
 8006be6:	2500      	movs	r5, #0
 8006be8:	4c2d      	ldr	r4, [pc, #180]	; (8006ca0 <floor+0xf8>)
 8006bea:	4623      	mov	r3, r4
 8006bec:	462f      	mov	r7, r5
 8006bee:	e025      	b.n	8006c3c <floor+0x94>
 8006bf0:	4a2c      	ldr	r2, [pc, #176]	; (8006ca4 <floor+0xfc>)
 8006bf2:	fa42 f806 	asr.w	r8, r2, r6
 8006bf6:	ea01 0208 	and.w	r2, r1, r8
 8006bfa:	4302      	orrs	r2, r0
 8006bfc:	d01e      	beq.n	8006c3c <floor+0x94>
 8006bfe:	a326      	add	r3, pc, #152	; (adr r3, 8006c98 <floor+0xf0>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 faaa 	bl	800015c <__adddf3>
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f7f9 feec 	bl	80009e8 <__aeabi_dcmpgt>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d0ea      	beq.n	8006bea <floor+0x42>
 8006c14:	2c00      	cmp	r4, #0
 8006c16:	bfbe      	ittt	lt
 8006c18:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006c1c:	fa43 f606 	asrlt.w	r6, r3, r6
 8006c20:	19a4      	addlt	r4, r4, r6
 8006c22:	2500      	movs	r5, #0
 8006c24:	ea24 0408 	bic.w	r4, r4, r8
 8006c28:	e7df      	b.n	8006bea <floor+0x42>
 8006c2a:	2e33      	cmp	r6, #51	; 0x33
 8006c2c:	dd0a      	ble.n	8006c44 <floor+0x9c>
 8006c2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006c32:	d103      	bne.n	8006c3c <floor+0x94>
 8006c34:	f7f9 fa92 	bl	800015c <__adddf3>
 8006c38:	4607      	mov	r7, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	4619      	mov	r1, r3
 8006c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c48:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006c4c:	fa22 f808 	lsr.w	r8, r2, r8
 8006c50:	ea18 0f00 	tst.w	r8, r0
 8006c54:	d0f2      	beq.n	8006c3c <floor+0x94>
 8006c56:	a310      	add	r3, pc, #64	; (adr r3, 8006c98 <floor+0xf0>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fa7e 	bl	800015c <__adddf3>
 8006c60:	2200      	movs	r2, #0
 8006c62:	2300      	movs	r3, #0
 8006c64:	f7f9 fec0 	bl	80009e8 <__aeabi_dcmpgt>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d0be      	beq.n	8006bea <floor+0x42>
 8006c6c:	2c00      	cmp	r4, #0
 8006c6e:	da02      	bge.n	8006c76 <floor+0xce>
 8006c70:	2e14      	cmp	r6, #20
 8006c72:	d103      	bne.n	8006c7c <floor+0xd4>
 8006c74:	3401      	adds	r4, #1
 8006c76:	ea25 0508 	bic.w	r5, r5, r8
 8006c7a:	e7b6      	b.n	8006bea <floor+0x42>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c82:	fa03 f606 	lsl.w	r6, r3, r6
 8006c86:	4435      	add	r5, r6
 8006c88:	42bd      	cmp	r5, r7
 8006c8a:	bf38      	it	cc
 8006c8c:	18e4      	addcc	r4, r4, r3
 8006c8e:	e7f2      	b.n	8006c76 <floor+0xce>
 8006c90:	2500      	movs	r5, #0
 8006c92:	462c      	mov	r4, r5
 8006c94:	e7a9      	b.n	8006bea <floor+0x42>
 8006c96:	bf00      	nop
 8006c98:	8800759c 	.word	0x8800759c
 8006c9c:	7e37e43c 	.word	0x7e37e43c
 8006ca0:	bff00000 	.word	0xbff00000
 8006ca4:	000fffff 	.word	0x000fffff

08006ca8 <scalbn>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	4617      	mov	r7, r2
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	b996      	cbnz	r6, 8006cde <scalbn+0x36>
 8006cb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cbc:	4303      	orrs	r3, r0
 8006cbe:	d039      	beq.n	8006d34 <scalbn+0x8c>
 8006cc0:	4b33      	ldr	r3, [pc, #204]	; (8006d90 <scalbn+0xe8>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f7f9 fc00 	bl	80004c8 <__aeabi_dmul>
 8006cc8:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <scalbn+0xec>)
 8006cca:	4604      	mov	r4, r0
 8006ccc:	429f      	cmp	r7, r3
 8006cce:	460d      	mov	r5, r1
 8006cd0:	da0f      	bge.n	8006cf2 <scalbn+0x4a>
 8006cd2:	a32b      	add	r3, pc, #172	; (adr r3, 8006d80 <scalbn+0xd8>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fbf6 	bl	80004c8 <__aeabi_dmul>
 8006cdc:	e006      	b.n	8006cec <scalbn+0x44>
 8006cde:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006ce2:	4296      	cmp	r6, r2
 8006ce4:	d10a      	bne.n	8006cfc <scalbn+0x54>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	f7f9 fa38 	bl	800015c <__adddf3>
 8006cec:	4604      	mov	r4, r0
 8006cee:	460d      	mov	r5, r1
 8006cf0:	e020      	b.n	8006d34 <scalbn+0x8c>
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006cf8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006cfc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006d00:	19b9      	adds	r1, r7, r6
 8006d02:	4291      	cmp	r1, r2
 8006d04:	dd0e      	ble.n	8006d24 <scalbn+0x7c>
 8006d06:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006d0a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006d0e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006d12:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006d16:	4820      	ldr	r0, [pc, #128]	; (8006d98 <scalbn+0xf0>)
 8006d18:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006d1c:	a31a      	add	r3, pc, #104	; (adr r3, 8006d88 <scalbn+0xe0>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	e7d9      	b.n	8006cd8 <scalbn+0x30>
 8006d24:	2900      	cmp	r1, #0
 8006d26:	dd08      	ble.n	8006d3a <scalbn+0x92>
 8006d28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d30:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006d3e:	da12      	bge.n	8006d66 <scalbn+0xbe>
 8006d40:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d44:	429f      	cmp	r7, r3
 8006d46:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006d4a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006d4e:	dcdc      	bgt.n	8006d0a <scalbn+0x62>
 8006d50:	a30b      	add	r3, pc, #44	; (adr r3, 8006d80 <scalbn+0xd8>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006d5a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006d5e:	480f      	ldr	r0, [pc, #60]	; (8006d9c <scalbn+0xf4>)
 8006d60:	f041 011f 	orr.w	r1, r1, #31
 8006d64:	e7b8      	b.n	8006cd8 <scalbn+0x30>
 8006d66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d6a:	3136      	adds	r1, #54	; 0x36
 8006d6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d70:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <scalbn+0xf8>)
 8006d7c:	e7ac      	b.n	8006cd8 <scalbn+0x30>
 8006d7e:	bf00      	nop
 8006d80:	c2f8f359 	.word	0xc2f8f359
 8006d84:	01a56e1f 	.word	0x01a56e1f
 8006d88:	8800759c 	.word	0x8800759c
 8006d8c:	7e37e43c 	.word	0x7e37e43c
 8006d90:	43500000 	.word	0x43500000
 8006d94:	ffff3cb0 	.word	0xffff3cb0
 8006d98:	8800759c 	.word	0x8800759c
 8006d9c:	c2f8f359 	.word	0xc2f8f359
 8006da0:	3c900000 	.word	0x3c900000

08006da4 <_init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr

08006db0 <_fini>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr
